from utils import (Substitution, pointer16_to_bytes, pointer24_to_bytes,
    get_asm_patch, apply_asm_patch)

common_added = False

def add_common_menu_stuff(fout):
    global common_added
    if common_added:
        return
    common_added = True

    common_sub = Substitution()

    # I think this used to be a marker of how much has been used...?
    common_sub.set_location(0x300000)
    common_sub.bytestring = pointer24_to_bytes(0xF01BF2)
    common_sub.write(fout)

    common_sub.set_location(0x301821)
    common_sub.bytestring = bytes([
        # Get_attack_name:
        0xA5, 0x38, # LDA $38
        0x64, 0x39, # STZ $39
        0xC9, 0x36, # CMP #$36 If is a spell
        0x90, 0x31, # BCC Get_spell_attack_name
        0xC9, 0x51, # CMP #$51 If is an esper
        0x90, 0x18, # BCC Get_esper_attack_name

        0xC9, 0x55, # CMP #$55 If skean
        0x90, 0x04, # BCC to_get_other_attack_name
        0xC9, 0x5D, # CMP #$5D If swdtech
        0x90, 0x03, # BCC to_get_swdtech_attack_name
        # to get_other_attack_name:
        0x4C, 0x4E, 0x1C, # JMP #$1CXX
        # to get_swdtech_attack_name:
        0x4C, 0x67, 0x1C, # JMP #$1C67

        #0xE9, 0x51, # SBC #$51
        #0xC2, 0x20, # REP #$20
        #0x29, 0xFF, 0x00, # AND $00FF
        #0x85, 0x38, # STA $38  -|
        #0x0A, # ASL             |
        #0x0A, # ASL             |
        #0x65, 0x38, # ADC $38   |
        #0x0A, # ASL            _| A *= 10
        0x69, 0xB9, 0xF7,   # ADC #$F7B9  A = start of attack name - #$E60000
        0xAA, # TAX
        0xA9, 0x0A, 0x00, # LDA #$000A
        0xE2, 0x20, # SEP #$20
        0x6B, # RTL
        # Get_esper_attack_name:
        0x38, # SEC
        0xE9, 0x36, # SBC #$36
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00,  # AND $00FF
        0x0A, # ASL
        0x0A, # ASL
        0x0A, # ASL  A *= 8
        0x69, 0xE1, 0xF6, # ADC #$F6E1  A = start of attack name - #$E60000
        0xAA, # TAX
        0xA9, 0x08, 0x00, # LDA #$0008
        0xE2, 0x20, # SEP #$20
        0x6B, # RTL
        # Get_spell_attack_name:
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00, # AND #$00FF
        0x85, 0x38, # STA $38
        0x0A, # ASL
        0x0A, # ASL
        0x0A, # ASL     A *= 8
        0x69, 0x67, 0xF5, #ADC #$F567  add start of spell names - #$E60000
        0x38, # SEC
        0xE5, 0x38, # SBC $38  change it to A *= 7
        0xAA, # TAX
        0xA9, 0x07, 0x00, # LDA #$0007
        0xE2, 0x20, # SEP #$20
        0x6B, # RTL
        # $F01871 write_attack_name:
        0x4C, 0x35, 0x1C, # JMP #$1CXX
        0xEA, # NOP
        #0xA5, 0x35, # LDA $35
        #0x85, 0x38, # STA $38
        0x22, 0x21, 0x18, 0xF0, # JSR Get_attack_name
        0x86, 0x38, # STX $38
        0x85, 0x3D, # STA $3D   3D = length of name
        0xA9, 0xE6, # LDA #$E6
        0x85, 0x3A, # STA $3A   38, 39, 3A = start of attack name
        0xA6, 0x36, # LDX $36
        0x86, 0x3B, # STX $3B
        0x22, 0xA3, 0x18, 0xF0, # JSR #$F018A3 Gui__WriteTextLength
        0x6B, # RTL
        # $F0188A WriteText?
        0xA6, 0x23, # LDX $23
        0xA0, 0x00, 0x00, # LDY #$0000
        0xB7, 0x20, # LDA [$20], Y
        0xF0, 0x0F, # BEQ
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA9, 0x20, # LDA #$20
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC8, # INY
        0x80, 0xED, # BRA
        0x6B, # RTL
        # $F018A3 Gui__WriteTextLength:
        0x4C, 0x00, 0x1C, # JMP $1C00
    ] + [0xEA] * 22 + [ # NOP * 22

        # $F018BC:
        0xA6, 0x1F, # LDX $1F
        0xA0, 0x00, 0x00, # LDY #$0000
        # Loop:
        0xB7, 0x1C, # LDA [$1C], Y
        0xF0, 0x0F, # BEQ $18d4
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA9, 0x30, # LDA #$30
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC8, # INY
        0x80, 0xED, # BRA Loop
        # 18d4:
        0x6B, #RTL

        # $F018D5
        0xA6, 0x27, # LDX $27
        0xA0, 0x00, 0x00, # LDY #$0000
        0xB7, 0x24, # LDA [$24], Y
        0xF0, 0x0F, # BEQ
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA5, 0x29,
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC8, # INY
        0x80, 0xED, # BRA
        0x6B, # RTL

        # $F018EE WriteTextGreen?
        0xA6, 0x15, # LDX $15
        0xA0, 0x00, 0x00, # LDY #$0000
        0xB7, 0x12, # LDA [$12], Y
        #Loop:
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA5, 0x18, # LDA $18
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC8, # INY
        0xC6, 0x17, # DEC $17
        0xD0, 0xED, # BNE Loop
        0x6B, # RTL

        # $F01907
        0x18, # CLC
        0xA6, 0x1E, # LDX $1E
        0xA4, 0x1C, # LDY $1C
        0x8C, 0x04, 0x42, # STY $4204
        0xA9, 0x0A, # LDA #$0A
        0x8D, 0x06, 0x42, # STA $4206
        0xA5, 0x20, #LDA $20
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xCA, # DEX
        0xCA, # DEX
        0xA9, 0xB4, #$B4
        0x6D, 0x16, 0x42, # ADC $4216
        0x9F, 0x02, 0x00, 0x7E, # STA $7E0002,X
        0xAC, 0x14, 0x42, # LDY $4214
        0xD0, 0xE2, # BNE
        0x6B, # RTL

        # $F0192B:
        0xA9, 0x20, # LDA $20
        0x8F, 0x40, 0x21, 0x00, # STA $002140
        0x6B # RTL
    ])
    common_sub.write(fout)

    common_sub.set_location(0x301C00)
    common_sub.bytestring = bytes([
        #Print_attack_name:
        0xA9, 0x0A, # LDA #$0A
        0x85, 0x3F, # STA $3F
        0xA6, 0x3B, # LDX $3B
        0xA0, 0x00, 0x00, # LDY #$0000
        0xB7, 0x38, # LDA [$38], Y
        #Loop:
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA9, 0x20, # LDA #$20
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC8, # INY
        0xC6, 0x3F, # DEC $3F
        0xC6, 0x3D, # DEC $3D
        0xD0, 0xEB, # BNE Loop
        0xA5, 0x3F, # LDA $3F
        0xF0, 0x12, # BEQ
        # Loop2:
        0xA9, 0xFF, # LDA #$0xFF
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA9, 0x20, # LDA #$20
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xE8, # INX
        0xE8, # INX
        0xC6, 0x3F, # DEC $3F
        0xD0, 0xEE, #BNE
        0x6B, # RTL

        # $F01C35 write_attack_name:
        0xA9, 0xE6, # LDA #$E6
        0x85, 0x3A, # STA $3A   38, 39, 3A = start of attack name - set 3A here so get_attack_name can override it for swdtechs
        0xA5, 0x35, # LDA $35
        0x85, 0x38, # STA $38
        0x22, 0x21, 0x18, 0xF0, # JSR Get_attack_name
        0x86, 0x38, # STX $38   38, 39, 3A = start of attack name
        0x85, 0x3D, # STA $3D   3D = length of name
        0xA6, 0x36, # LDX $36
        0x86, 0x3B, # STX $3B
        0x22, 0xA3, 0x18, 0xF0, # JSR #$F018A3 Gui__WriteTextLength
        0x6B, # RTL

        # $F01C4E Get other attack name
        0x38,       # SEC
        0xE9, 0x51, # SBC #$51
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00, # AND $00FF
        0x85, 0x38, # STA $38  -|
        0x0A, # ASL             |
        0x0A, # ASL             |
        0x65, 0x38, # ADC $38   |
        0x0A, # ASL            _| A *= 10
        0x69, 0xB9, 0xF7,   # ADC #$F7B9  A = start of attack name - #$E60000
        0xAA, # TAX
        0xA9, 0x0A, 0x00, # LDA #$000A
        0xE2, 0x20, # SEP #$20
        0x6B, # RTL

        # $F01C67 Get_swdtech_name
        0xA9, 0xCF, # LDA #$CF
        0x85, 0x3A, # STA $3A   # Set high byte of attack name start to #$CF
        0xA5, 0x35, # LDA $35
        0x38, # SEC
        0xE9, 0x55, # SBC #$55
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00, # AND $00FF
        0x0A, # ASL             |
        0x85, 0x38, # STA $38  -|
        0x0A, # ASL             |
        0x65, 0x38, # ADC $38   |
        0x0A, # ASL            _| A *= 12
        0x69, 0x40, 0x3C,   # ADC #$3C40  A = start of attack name - #$CF0000
        0xAA, # TAX
        0xA9, 0x0A, 0x00, # LDA #$000A
        0xE2, 0x20, # SEP #$20
        0x6B, # RTL
    ])
    common_sub.write(fout)

def improve_item_display(fout):
    add_common_menu_stuff(fout)

    display_sub = Substitution()
    display_sub.set_location(0x38706)
    display_sub.bytestring = bytes([0x22, 0x03, 0x00, 0xF0])
    display_sub.write(fout)

    display_sub.set_location(0x389E6)
    display_sub.bytestring = bytes([0x22, 0x2C, 0x00, 0xF0])
    display_sub.write(fout)

    display_sub.set_location(0x300003)
    display_sub.bytestring = bytes([
        0xDA, # PHX
        0x5A, # PHY
        0x7B, # TDC
        0x0B, # PHD
        0xF4, 0x00, 0x15, # PEA
        0x2B, #PLD
        0xC2, 0x20, # REP #$20
        0xAD, 0x34, 0x21, # LDA
        0x8F, 0xE8, 0x80, 0x7E, # STA $7E80E8
        0x85, 0x08, # STA $08
        0xE2, 0x20, # SEP #$20
        0xA9, 0x00, # LDA #$00
        0x8F, 0xEA, 0x80, 0x7E, # STA $7E80EA
        0x85, 0x0A, # STA $0A
        0x22, 0x80, 0x00, 0xF0, # JSL $F00080
        0x2B, # PLD
        0x7A, # PLY
        0xFA, # PLX
        0xBF, 0x00, 0x50, 0xD8, # LDA $D85000,X
        0x6B, # RTL

        0xDA, #PHX
        0x5A, #PHY
        0x7B, #TDC
        0x0B, #PHD
        0xF4, 0x00, 0x15, #PEA $1500
        0x2B, #PLD
        0xC2, 0x20, # REP #$20
        0xAF, 0xE8, 0x80, 0x7E, # LDA $7E8086
        0x85, 0x08, # STA $08
        0xE2, 0x20, # SEP #$20
        0xAF, 0xEA, 0x80, 0x7E, # LDA $7E80EA
        0x85, 0x0A, # STA $0A
        0x22, 0x80, 0x00, 0xF0, # JSL $F00080
        0xAA, # TAX
        0xAD, 0x0B, 0x00, # LDA $000B
        0x89, 0x08, 0xF0, # BIT $F008
        0x0F, 0xAF, 0xEA, 0x80, # ORA $80EAAF
        0x7E, 0x10, 0x09, # ROR $7E80,X
        0x1A, # INC A
        0x8F, 0xEA, 0x80, 0x7E, # STA $7E80EA
        0x22, 0x32, 0x19, 0xF0, # JSL $F01932
        0xAD, 0x0B, 0x00, # LDA $000B
        0x89, 0x04, 0xF0, # BIT $F004
        0x12, 0xE0, # ORA ($E0)
        0x04, 0x00, # TSB $84
        0x90, 0x0D, # BCC
        0xAF, 0xEA, 0x80, 0x7E, # LDA $7E80EA
        0x3A, # DEC 3A
        0x8F, 0xEA, 0x80, 0x7E, # STA $7E80EA
        0x22, 0x32, 0x19, 0xF0, # JSL $F01932
        0x2B, # PLD
        0x7A, # PLY
        0xFA, # PLX
        0xA5, 0x09, # LDA $09
        0x89, 0x80, # BIT #$80
        0x6B, # RTL
    ])
    display_sub.write(fout)

    display_sub.set_location(0x300080)
    display_sub.bytestring = bytes([
        # $F00080:
        0x64, 0x0B, # STZ $0B
        0xA5, 0x0A, # LDA $0A
        0x85, 0x0C, # STA $0C
        0x64, 0x0D, # STZ $0D
        0xA6, 0x08, # LDX $08
        0x86, 0x0E, # STX $0E
        0xA2, 0x19, 0x00, # LDX $0019
        0xA9, 0x00, # LDA $00
        # Loop:
        0x9F, 0xEF, 0x80, 0x7E, # STA $7E80EF,X
        0x9F, 0x2F, 0x81, 0x7E, # STA $7E812F,X
        0x9F, 0x6F, 0x81, 0x7E, # STA $7E816F,X
        0x9F, 0xAF, 0x81, 0x7E, # STA $7E81AF,X
        0xCA, # DEX
        0x10, 0xED, # BPL Loop
        0xA6, 0x0E, # LDX $0E
        0xBF, 0x13, 0x50, 0xD8, # LDA $D85013,X (otherproperties byte of item)
        0x89, 0x04, # BIT #$04
        0xF0, 0x1A, # BEQ No_proc
        0xE6, 0x0C, # INC $0C
        0xA5, 0x0C, # LDA $0C
        0x30, 0x14, # BMI No_proc
        0xC9, 0x04, # CMP #$02
        0xB0, 0x10, # BCS No_proc
        0xBF, 0x12, 0x50, 0xD8, # LDA $D85012, X (breakeffect byte of item)
        0xEA, # NOP
        0xEA, # NOP
        0x85, 0x11, # STA $11
        0xA5, 0x0C, # LDA $0C
        0x85, 0x10, # STA $10
        0x22, 0xC1, 0x06, 0xF0, # JSL $F006C1
        # No_proc:
        0xA6, 0x08, # LDX $08
        0x9B, # TXY
        0xC8, # INY
        0x84, 0x08, # STY $08
        0xBF, 0x05, 0x50, 0xD8, # LDA $D85005,X (field effect byte of item)
        0x38, # SEC
        0x6A, # ROR A
        0x85, 0x0D, # STA $0D
        0xE6, 0x0B, # INC $0B
        0x90, 0x21, # BCC
        0xE6, 0x0C, # INC $0C
        0x30, 0x1D, # BMI
        0xF0, 0x1B, # BEQ
        0xA5, 0x0C, # LDA $0C
        0xC9, 0x04, # CMP #$04
        0xB0, 0x15, # BCS
        0xA5, 0x0B, # LDA $0B
        0x3A, # DEC A
        0x85, 0x11, # STA $11
        0xA5, 0x0C, # LDA $0C
        0x85, 0x10, # STA $10
        0x22, 0xE8, 0x05, 0xF0, # JSL $F005E8
        0xA9, 0x00, # LDA $00
        0x65, 0x0C, # ADC $0C
        0x85, 0x0C, # STA $0C
        0x80, 0x00, # BRA $00 ?!
        0x46, 0x0D, # LSR $1E
        0xD0, 0xD7, # BNE
        0xA5, 0x0B, # LDA $0B
        0xC9, 0x48, # CMP $02
        0xF0, 0x06, # BEQ
        0xC9, 0x50, # CMP $50
        0xD0, 0xBF, # BNE
        0x80, 0x11, # BRA
        0xC2, 0x20, # REP #$20
        0xA5, 0x08, 0x18, # LDA $08
        0x69, 0x0B, 0x00, # ADC #$0B
        0x85, 0x08, # STA $08
        0xA9, 0x00, 0x00, #LDA $0000
        0xE2, 0x20, # SEP #$20
        0x80, 0xAC, # BRA
        0xA5, 0x0C, # LDA $0C
        0xC9, 0x04, # CMP $04
        0xB0, 0x33, # BCS
        0xA6, 0x08, # LDX $08
        0xBF, 0x06, 0x50, 0xD8, # LDA $D85006
        0x4A, # LSR A
        0x4A, # LSR A
        0x4A, # LSR A
        0x4A, # LSR A
        0xF0, 0x27, # BEQ
        0x3A, # DEC
        0x0A, # ASL A
        0xAA, # TAX
        0xE6, 0x0C, # INC $0C
        0xA5, 0x0C, # LDA $0C
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00, # AND #$FF00
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xEF, 0x80, # ADC #$80EF
        0x85, 0x23, # STA $23
        0xBF, 0x02, 0x05, 0xF0,  # LDA #$F00502,X
        0x85, 0x20, # STA $20
        0xA9, 0x00, 0x00, # LDA $0000
        0xE2, 0x20, # SEP #$20
        0xA9, 0xF0, # LDA #$F0
        0x85, 0x22, # STA $022
        0x22, 0x8A, 0x18, 0xF0, # JSL
        0xA5, 0x0C, # LDA $0C
        0x38, # SEC
        0xE5, 0x0A, # SBC $0A
        0xF0, 0x0D, # BEC
        0xC9, 0x04, # CMP #$04
        0xB0, 0x13, # BCS
        0xC9, 0x01, # CMP $01
        0xF0, 0x0A, # BEQ
        0xA2, 0xC8, 0x05, # LDX #$05C8
        0x80, 0x0D, # BRA
        0xA2, 0xB6, 0x05, # LDX #$05B6
        0x80, 0x08, # BRA
        0xA2, 0xC0, 0x05, # LDX #$05C8
        0x80, 0x03, # BRA
        0xA2, 0xD1, 0x05, # LDX #$05D1
        0x86, 0x1C, # STX $1C
        0xA9, 0xF0, 0x85, 0x1E, 0xA2, 0xEF, 0x80, 0x86, 0x1F, 0x22,
        0xBC, 0x18, 0xF0, 0xA6, 0x0E, 0xBF, 0x13, 0x50, 0xD8, 0x29, 0x20, 0xF0,
        0x12, 0xA2, 0xDF, 0x05, 0x86, 0x20, 0xA9, 0xF0, 0x85, 0x22, 0xA2, 0xAF,
        0x83, 0x86, 0x23, 0x22, 0x8A, 0x18, 0xF0, 0xA5, 0x0C, 0x6B,

        # Text Pointer Table
        # fieldeffect
        0x4A, 0x02, 0x53, 0x02, 0x49, 0x02, 0x49, 0x02,
        0x49, 0x02, 0x5B, 0x02, 0x49, 0x02, 0x49, 0x02,

        # status protect 1
        0x6D, 0x02, 0x75, 0x02, 0x7F, 0x02, 0x89, 0x02,
        0x94, 0x02, 0x9D, 0x02, 0xA4, 0x02, 0xAF, 0x02,

        # statusprotect2
        0xBB, 0x02, 0xC8, 0x02, 0xD6, 0x02, 0xDF, 0x02,
        0xE7, 0x02, 0xF2, 0x02, 0xFC, 0x02, 0x07, 0x03,

        # statusacquire3
        0x10, 0x03, 0x1B, 0x03, 0x26, 0x03, 0x30, 0x03,
        0x3B, 0x03, 0x45, 0x03, 0x50, 0x03, 0x5A, 0x03,

        # statboost1
        0x67, 0x03, 0x74, 0x03, 0x81, 0x03, 0x89, 0x03,
        0x91, 0x03, 0x99, 0x03, 0xA1, 0x03, 0xA9, 0x03,

        # special1
        0xB1, 0x03, 0xBC, 0x03, 0x48, 0x02, 0x47, 0x02,
        0x46, 0x02, 0x45, 0x02, 0x44, 0x02, 0xC6, 0x03,

        # statboost2
        0xD1, 0x03, 0xDE, 0x03, 0xDF, 0x03, 0xED, 0x03,
        0xF9, 0x03, 0x07, 0x04, 0x13, 0x04, 0x1D, 0x04,

        # special2
        0x28, 0x04, 0x32, 0x04, 0x3E, 0x04, 0x4B, 0x04,
        0x54, 0x04, 0x5F, 0x04, 0x6E, 0x04, 0x62, 0x02,

        # special3
        0x74, 0x04, 0x81, 0x04, 0x8D, 0x04, 0x9B, 0x04,
        0xA7, 0x04, 0x49, 0x02, 0x49, 0x02, 0xB1, 0x04,

        # statusacquire2
        0xBF, 0x04, 0xC9, 0x04, 0xD4, 0x04, 0xDA, 0x04,
        0xE2, 0x04, 0xEA, 0x04, 0xF4, 0x04, 0xFC, 0x04,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xB5, 0xC0, 0xB6, 0xFF, 0x9E, 0xA7, 0x9C, 0xC5, 0x00, # 1/2 enc.
        0x8D, 0xA8, 0xFF, 0x9E, 0xA7, 0x9C, 0xC5, 0x00, # No enc.
        0x92, 0xA9, 0xAB, 0xA2, 0xA7, 0xAD, 0x00, # Sprint
        0x92, 0xAD, 0x9E, 0xA9, 0xFF, 0xAB, 0x9E, 0xA0, 0x9E, 0xA7, 0x00, # Step regen
        0x8D, 0xA8, 0xFF, 0x9D, 0x9A, 0xAB, 0xA4, 0x00, # No dark
        0x8D, 0xA8, 0xFF, 0xB3, 0xA8, 0xA6, 0x9B, 0xA2, 0x9E, 0x00, # No zombie
        0x8D, 0xA8, 0xFF, 0xA9, 0xA8, 0xA2, 0xAC, 0xA8, 0xA7, 0x00, # No poison
        0x8D, 0xA8, 0xFF, 0xA6, 0x9A, 0xA0, 0xA2, 0xAD, 0x9E, 0xA4, 0x00, # No magitek
        0x8D, 0xA8, 0xFF, 0x9C, 0xA5, 0x9E, 0x9A, 0xAB, 0x00, # No clear
        0x8D, 0xA8, 0xFF, 0xA2, 0xA6, 0xA9, 0x00, # No imp
        0x8D, 0xA8, 0xFF, 0xA9, 0x9E, 0xAD, 0xAB, 0xA2, 0x9F, 0xB2, 0x00, # No petrify
        0x83, 0x9E, 0x9A, 0xAD, 0xA1, 0xFF, 0xA9, 0xAB, 0xA8, 0xAD, 0xC5, 0x00, # Death prot.
        0x8D, 0xA8, 0xFF, 0x9C, 0xA8, 0xA7, 0x9D, 0x9E, 0xA6, 0xA7, 0x9E, 0x9D, 0x00, # No condemned
        0x8E, 0xA7, 0xFF, 0xA7, 0x9E, 0x9A, 0xAB, 0xFF, 0x9D, 0x9E, 0x9A, 0xAD, 0xA1, 0x00, # On near death
        0x8D, 0xA8, 0xFF, 0xA2, 0xA6, 0x9A, 0xA0, 0x9E, 0x00, # No image
        0x8D, 0xA8, 0xFF, 0xA6, 0xAE, 0xAD, 0x9E, 0x00, # No mute
        0x8D, 0xA8, 0xFF, 0x9B, 0x9E, 0xAB, 0xAC, 0x9E, 0xAB, 0xA4, 0x00, # No berserk
        0x8D, 0xA8, 0xFF, 0xA6, 0xAE, 0x9D, 0x9D, 0xA5, 0x9E, 0x00, # No muddle
        0x8D, 0xA8, 0xFF, 0xAC, 0x9E, 0xA2, 0xB3, 0xAE, 0xAB, 0x9E, 0x00, # No seizure
        0x8D, 0xA8, 0xFF, 0xAC, 0xA5, 0x9E, 0x9E, 0xA9, 0x00, # No sleep
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0x9F, 0xA5, 0xA8, 0x9A, 0xAD, 0x00, # Auto float
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAB, 0x9E, 0xA0, 0x9E, 0xA7, 0x00, # Auto regen
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAC, 0xA5, 0xA8, 0xB0, 0x00, # Auto slow
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xA1, 0x9A, 0xAC, 0xAD, 0x9E, 0x00, # Auto haste
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAC, 0xAD, 0xA8, 0xA9, 0x00, # Auto stop
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAC, 0xA1, 0x9E, 0xA5, 0xA5, 0x00, # Auto shell
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAC, 0x9A, 0x9F, 0x9E, 0x00, # Auto safe
        0x80, 0xAE, 0xAD, 0xA8, 0xFF, 0xAB, 0x9E, 0x9F, 0xA5, 0x9E, 0x9C, 0xAD, 0x00, # Auto reflect
        0x81, 0x9A, 0xAD, 0xC5, 0x8F, 0xB0, 0xAB, 0xFF, 0xCA, 0xB5, 0xC0, 0xB8, 0x00, # Bat.Pwr +1/4
        0x8C, 0x9A, 0xA0, 0xC5, 0x8F, 0xB0, 0xAB, 0xFF, 0xCA, 0xB5, 0xC0, 0xB8, 0x00, # Mag.Pwr +1/4
        0x87, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xB8, 0x00, # HP +1/4
        0x87, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xB6, 0x00, # HP +1/2
        0x87, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xBC, 0x00, # HP +1/8
        0x8C, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xB8, 0x00, # MP +1/4
        0x8C, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xB6, 0x00, # MP +1/2
        0x8C, 0x8F, 0xFF, 0xCA, 0xB5, 0xC0, 0xBC, 0x00, # MP +1/8
        0x88, 0xA7, 0xA2, 0xAD, 0xA2, 0x9A, 0xAD, 0xA2, 0xAF, 0x9E, 0x00, # Initiative
        0x95, 0xA2, 0xA0, 0xA2, 0xA5, 0x9A, 0xA7, 0x9C, 0x9E, 0x00, # Vigilance
        0x92, 0xAE, 0xA9, 0x9E, 0xAB, 0xFF, 0x89, 0xAE, 0xA6, 0xA9, 0x00, # Super Jump
        0x81, 0x9E, 0xAD, 0xAD, 0x9E, 0xAB, 0xFF, 0xAC, 0xAD, 0x9E, 0x9A, 0xA5, 0x00, # Better Steal
        0x00,
        0x81, 0x9E, 0xAD, 0xAD, 0x9E, 0xAB, 0xFF, 0xAC, 0xA4, 0x9E, 0xAD, 0x9C, 0xA1, 0x00, # Better sketch
        0x81, 0x9E, 0xAD, 0xAD, 0x9E, 0xAB, 0xFF, 0x9C, 0xAD, 0xAB, 0xA5, 0x00, # Better ctrl
        0xB5, 0xB4, 0xB4, 0xCD, 0xFF, 0xA1, 0xA2, 0xAD, 0xFF, 0xAB, 0x9A, 0xAD, 0x9E, 0x00, # 100% hit rate
        0xB5, 0xC0, 0xB6, 0xFF, 0x8C, 0x8F, 0xFF, 0x9C, 0xA8, 0xAC, 0xAD, 0x00, # 1/2 MP cost
        0xB5, 0xFF, 0x8C, 0x8F, 0xFF, 0x9C, 0xA8, 0xAC, 0xAD, 0x00, # 1 MP cost
        0x95, 0xA2, 0xA0, 0xA8, 0xAB, 0xFF, 0xCA, 0xB9, 0xB4, 0xCD, 0x00, # Vigor + 50%
        0xD5, 0xFF, 0x97, 0xC4, 0x85, 0xA2, 0xA0, 0xA1, 0xAD, 0x00, # -> X-Fight
        0x82, 0x9A, 0xA7, 0xFF, 0x9C, 0xA8, 0xAE, 0xA7, 0xAD, 0x9E, 0xAB, 0x00, # Can counter
        0x91, 0x9A, 0xA7, 0x9D, 0xA8, 0xA6, 0xFF, 0x9E, 0xAF, 0x9A, 0x9D, 0x9E, 0x00, # Random evade
        0x86, 0x9A, 0xAE, 0xA7, 0xAD, 0xA5, 0x9E, 0xAD, 0x00, # Gauntlet
        0x83, 0xAE, 0x9A, 0xA5, 0xFF, 0xB0, 0xA2, 0x9E, 0xA5, 0x9D, 0x00, # Dual wield
        0x84, 0xAA, 0xAE, 0xA2, 0xA9, 0xFF, 0x9A, 0xA7, 0xB2, 0xAD, 0xA1, 0xA2, 0xA7, 0xA0, 0x00, # Equip anything
        0x82, 0xA8, 0xAF, 0x9E, 0xAB, 0x00, # Cover
        0x8B, 0xA8, 0xB0, 0xFF, 0x87, 0x8F, 0xFF, 0x92, 0xA1, 0x9E, 0xA5, 0xA5, 0x00, # Low hp shell
        0x8B, 0xA8, 0xB0, 0xFF, 0x87, 0x8F, 0xFF, 0x92, 0x9A, 0x9F, 0x9E, 0x00, # Low HP safe
        0x8B, 0xA8, 0xB0, 0xFF, 0x87, 0x8F, 0xFF, 0x91, 0x9F, 0xA5, 0x9E, 0x9C, 0xAD, 0x00, # Low HP rflect
        0x83, 0xA8, 0xAE, 0x9B, 0xA5, 0x9E, 0xFF, 0x9E, 0xB1, 0xA9, 0xC5, 0x00, # Double exp.
        0x83, 0xA8, 0xAE, 0x9B, 0xA5, 0x9E, 0xFF, 0x86, 0x8F, 0x00, # Double GP
        0x91, 0x9E, 0xAF, 0x9E, 0xAB, 0xAC, 0x9E, 0xFF, 0x9C, 0xAE, 0xAB, 0x9E, 0xAC, 0x00, # Reverse cures
        0x82, 0xA8, 0xA7, 0x9D, 0x9E, 0xA6, 0xA7, 0x9E, 0x9D, 0x00, # Condemned
        0x8D, 0x9E, 0x9A, 0xAB, 0xFF, 0x9D, 0x9E, 0x9A, 0xAD, 0xA1, 0x00, # Near death
        0x88, 0xA6, 0x9A, 0xA0, 0x9E, 0x00, # Image
        0x92, 0xA2, 0xA5, 0x9E, 0xA7, 0x9C, 0x9E, 0x00, # Silence
        0x81, 0x9E, 0xAB, 0xAC, 0x9E, 0xAB, 0xA4, 0x00, # Berserk
        0x82, 0xA8, 0xA7, 0x9F, 0xAE, 0xAC, 0xA2, 0xA8, 0xA7, 0x00, #Confusion
        0x92, 0x9E, 0xA2, 0xB3, 0xAE, 0xAB, 0x9E, 0x00, # Seizure
        0x92, 0xA5, 0x9E, 0x9E, 0xA9, 0x00, # Sleep
        0x20, 0x05, 0x2A, 0x05, 0x2F, 0x05, 0x36, 0x05, 0x40, 0x05, 0x49, 0x05,
        0x52, 0x05, 0x5F, 0x05, 0x6C, 0x05, 0x71, 0x05, 0x79, 0x05, 0x85, 0x05,
        0x92, 0x05, 0x9D, 0x05, 0xA9, 0x05,
        0x82, 0x9A, 0xA7, 0xFF, 0xAC, 0xAD, 0x9E, 0x9A, 0xA5, 0x00, # Can steal
        0x80, 0xAD, 0xA6, 0x9A, 0x00, # Atma
        0x97, 0xFF, 0xA4, 0xA2, 0xA5, 0xA5, 0x00, # X-kill
        0x8C, 0x9A, 0xA7, 0xFF, 0x9E, 0x9A, 0xAD, 0x9E, 0xAB, 0x00, # Man eater
        0x83, 0xAB, 0x9A, 0xA2, 0xA7, 0xFF, 0x87, 0x8F, 0x00, # Drain HP
        0x83, 0xAB, 0x9A, 0xA2, 0xA7, 0xFF, 0x8C, 0x8F, 0x00, # Drain MP
        0x94, 0xAC, 0x9E, 0xAC, 0xFF, 0xAC, 0xA8, 0xA6, 0x9E, 0xFF, 0x8C, 0x8F, 0x00, # Uses some MP
        0x91, 0x9A, 0xA7, 0x9D, 0xA8, 0xA6, 0xFF, 0xAD, 0xA1, 0xAB, 0xA8, 0xB0, 0x00, # Random throw
        0x83, 0xA2, 0x9C, 0x9E, 0x00, # Dice
        0x95, 0x9A, 0xA5, 0xA2, 0x9A, 0xA7, 0xAD, 0x00, # Valiant
        0x96, 0xA2, 0xA7, 0x9D, 0xFF, 0x9A, 0xAD, 0xAD, 0x9A, 0x9C, 0xA4, 0x00, # Wind attack
        0x87, 0x9E, 0x9A, 0xA5, 0xAC, 0xFF, 0xAD, 0x9A, 0xAB, 0xA0, 0x9E, 0xAD, 0x00, # Heals target
        0x92, 0xA5, 0xA2, 0x9C, 0x9E, 0xFF, 0xA4, 0xA2, 0xA5, 0xA5, 0x00, # Slice kill
        0x85, 0xAB, 0x9A, 0xA0, 0xA2, 0xA5, 0x9E, 0xFF, 0xB0, 0xA9, 0xA7, 0x00, # Fragile wpn
        0x94, 0xAC, 0x9E, 0xAC, 0xFF, 0xA6, 0xA8, 0xAB, 0x9E, 0xFF, 0x8C, 0x8F, 0x00, # Uses more MP
        0x8D, 0xA8, 0xFF, 0x9E, 0x9F, 0x9F, 0x9E, 0x9C, 0xAD, 0x00, # No effect
        0x84, 0x9F, 0x9F, 0x9E, 0x9C, 0xAD, 0xC1, 0x00, # Effect:
        0x84, 0x9F, 0x9F, 0x9E, 0x9C, 0xAD, 0xAC, 0xC1, 0x00, # Effects:
        0x8C, 0xA8, 0xAB, 0x9E, 0xFF, 0x9E, 0x9F, 0x9F, 0x9E, 0x9C, 0xAD, 0xAC, 0xC1, 0x00, # More effects:
        0x81, 0x9A, 0x9C, 0xA4, 0xFF, 0xAB, 0xA8, 0xB0, 0x00, # Back row
        # $F005E8:
        0xC2, 0x30, # REP #$30
        0xA5, 0x11, # LDA $11
        0x29, 0xFF, 0x00, # AND #$00FF
        0x0A, # ASL
        0xAA, # TAX
        0xBF, 0xA4, 0x01, 0xF0, # LDA $F001A4, X (fieldeffect table)
        0xAA, # TAX
        0xE0, 0x49, 0x02, # CPX $0249
        0x90, 0x3C, # BCC
        0xD0, 0x1C, # BNE
        0xA5, 0x10, # LDA $10
        0x29, 0xFF, 0x00, # AND #$00FF
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xEF, 0x80, # ADC #$80EF
        0x85, 0x13, # STA $13
        0xA9, 0x00, 0x00, # LDA #$0000
        0xE2, 0x20, # SEP #$20
        0xA5, 0x11, # LDA $11
        0x85, 0x12, # STA $12
        0x22, 0xF6, 0x06, 0xF0, # JSL $F006F6 WriteHex
        0x80, 0x1C, # BRA WriteEffect_Return
        0xA5, 0x10, # LDA $10
        0x29, 0xFF, 0x00, # AND #$00FF
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xEF, 0x80, # ADC #$80EF
        0x85, 0x23, # STA $23
        0xA9, 0x00, 0x00, # LDA #$0000
        0xE2, 0x20, # SEP #$20
        0xA9, 0xF0, # LDA #$F0
        0x85, 0x22, # STA $22
        0x86, 0x20, # STX $20
        0x22, 0x8A, 0x18, 0xF0, # JSL $F0188A WriteText?
        # WriteEffect_Return:
        0x18, # CLC
        0x6B, # RTL

        0xC2, 0x20, # REP 20
        0x38, #SEC
        0x8A, # TXA
        0xE9, 0x44, 0x02, # SBC #$0244
        0xAA, #TAX
        0xDA, # PHX
        0xA5, 0x10, # LDA $10
        0x29, 0xFF, 0x00, # AND #$00FF
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xF3, 0x80, # ADC #$80F3
        0x85, 0x3B, # STA $3B
        0xDA, # PHX
        0xAA, #TAX
        0xA9, 0xD5, 0x6C, # LDA #$6CD5
        0x9F, 0xFC, 0xFF, 0x7D, # STA $7DFFFC,X
        0xFA, #PLX
        0xBF, 0x98, 0x61, 0xC3, #LDA $C36198, X (Command numbers to change from)
        0x29, 0xFF, 0x00, # AND #$00FF
        0x85, 0x12, # STA $12
        0x0A, # ASL
        0x0A, # ASL
        0x0A, # ASL
        0x69, 0xA0, 0xCE, # ADC #$CEA0
        0x38, # SEC
        0xE5, 0x12, # SBC $12
        0x85, 0x38, # STA $38
        0xA9, 0xD8, 0x00, # LDA #$00D8
        0xE2, 0x20, # SEP $20
        0x85, 0x3A, # STA $3A
        0xA9, 0x07, # LDA #$07
        0x85, 0x3D, # STA $3D
        0x22, 0xA3, 0x18, 0xF0, # JSL $F018A3 Gui__WriteTextLength
        0xA5, 0x10, # LDA $10
        0xC9, 0x04, # CMP #$04
        0xB0, 0xB5, # BCS
        0xE6, 0x10, # INC $10
        0xC2, 0x20, # REP 20
        0xFA, # PLX
        0xA5, 0x10, # LDA $10
        0x29, 0xFF, 0x00, # AND #$00FF
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xF3, 0x80, # ADC #$80F3
        0x85, 0x3B, # STA $3B
        0xDA, # PHX
        0xAA, # TAX
        0xA9, 0xD5, 0x2C, # LDA #$2CD5
        0x9F, 0xFC, 0xFF, 0x7D, # STA $7DFFFC,X
        0xFA, # PLX
        0xBF, 0x9D, 0x61, 0xC3,  # LDA $C36198, X (Command numbers to change to)
        0x29, 0xFF, 0x00, # AND #$00FF
        0x85, 0x12, # STA $12
        0x0A, # ASL
        0x0A, # ASL
        0x0A, # ASL
        0x69, 0xA0, 0xCE, # ADC #$CEA0
        0x38, # SEC
        0xE5, 0x12, 0x85, # sbc $8512
        0x38, # SEC
        0xA9, 0xD8, 0x00, 0xE2,
        0x20, 0x85, 0x3A, 0xA9, 0x07, 0x85, 0x3D, 0x22, 0xA3, 0x18, 0xF0, 0x38,
        0x6B, # RTL

        # $F006C1
        0xA5, 0x10, # LDA $10
        0xF0, 0x30, # BEQ
        0x30, 0x2E, # BMI
        0xC9, 0x04, # CMP #$04
        0xB0, 0x2A, # BCS
        0xA5, 0x11, # LDA $11
        0x85, 0x38, # STA $38
        0x22, 0x21, 0x18, 0xF0, # JSL $F01821
        0x85, 0x17, # STA $17
        0x86, 0x12, # STX $12
        0xA9, 0xE6, # LDA #$E6
        0x85, 0x14, # STA $14
        0xA5, 0x10, # LDA $10
        0xC2, 0x20, # REP #$20
        0x29, 0xFF, 0x00, # AND #$00FF
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x69, 0xEF, 0x80, # ADC #$80EF
        0x85, 0x15, # STA $15
        0xA9, 0x28, 0x00, # LDA #$0028
        0xE2, 0x20, # SEP $20
        0x85, 0x18, # STA $18
        0x22, 0xEE, 0x18, 0xF0, # JSL $F018EE
        0x6B, # RTL

        # $F006F6 WriteHex:
        0xA5, 0x12, # LDA $12
        0x29, 0xF0, # AND #$F0
        0x4A, # LSR
        0x4A, # LSR
        0x4A, # LSR
        0x4A, # LSR
        0xAA, # TAX
        0xBF, 0x25, 0x07, 0xF0, # LDA $F00725, X (table for hex digits)
        0xA6, 0x13, # LDX $13
        0x9F, 0x00, 0x00, 0x7E, # STA $7E0000,X
        0xA9, 0x20, # LDA $20
        0x9F, 0x01, 0x00, 0x7E, # STA $7E0001,X
        0xA5, 0x12, # LDA $12
        0x29, 0x0F, # AND #$0F
        0xAA, # TAX
        0xBF, 0x25, 0x07, 0xF0, # LDA $F00725, X (table for hex digits)
        0xA6, 0x13, # LDX $13
        0x9F, 0x02, 0x00, 0x7E, # STA $7E0002,X
        0xA9, 0x20, # LDA $20
        0x9F, 0x03, 0x00, 0x7E, # STA $7E0003,X
        0x6B, # RTL
        # $F00725 table for hex digits
        0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB,
        0xBC, 0xBD, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F])
    display_sub.write(fout)

def improve_gogo_status_menu(fout):
    add_common_menu_stuff(fout)

    status_sub = Substitution()
    status_sub.set_location(0x35EAD)
    status_sub.bytestring = bytes([0x22, 0x60, 0x0A, 0xF0]) # StatusMenu__FixOverflow
    status_sub.write(fout)

    status_sub.set_location(0x35E91)
    status_sub.bytestring = bytes([0x22, 0x6B, 0x0A, 0xF0]) # StatusMenu__FixWindowSize
    status_sub.write(fout)

    status_sub.set_location(0x363BA)
    status_sub.bytestring = bytes([0x22, 0x76, 0x0A, 0xF0]) # StatusMenu__FixSelection
    status_sub.write(fout)

    status_sub.set_location(0x322A3)
    status_sub.bytestring = bytes([0x22, 0x88, 0x0A, 0xF0]) # StatusMenu__FixScrollReset
    status_sub.write(fout)

    status_sub.set_location(0x3640C)
    status_sub.bytestring = bytes([0x22, 0x98, 0x0A, 0xF0, 0x60]) # StatusMenu__Main
    status_sub.write(fout)

    status_sub.set_location(0x300A60)
    status_sub.bytestring = bytes([
        # StatusMenu__FixOverflow:
        0xAF, 0x89, 0x9D, 0x7E, # LDA $7E9D89
        0xC9, 0x0F, # CMP #$0F
        0x90, 0x02, # BCC StatusMenu__FixOverflow_skip
        0xA9, 0x0F, # LDA #$0F
        # StatusMenu__FixOverflow_skip:
        0x6B, # RTL

        # StatusMenu__FixWindowSize
        0xC9, 0x17, # CMP #$17
        0x90, 0x02, # BCC StatusMenu__FixWindowSize_skip
        0xA9, 0x17, # LDA #$17
        # StatusMenu__FixWindowSize_skip:
        0x8F, 0x90, 0xAA, 0x7E, # STA $7EAA90
        0x6B, # RTL

        # StatusMenu__FixSelection
        0x48, # PHA
        0xAF, 0x89, 0x9D, 0x7E, # LDA $7E9D89
        0xAA, # TAX
        0x68, # PLA
        0x18, # CLC
        0x7F, 0x8A, 0x9D, 0x7E, # ADC $7E9D8A,X
        0xAA, # TAX

        # Original Code
        0xBF, 0x8A, 0x9D, 0x7E, # LDA $7E9D8A,X
        0x6B, # RTL
        # StatusMenu__FixScrollReset
        0xAF, 0x89, 0x9D, 0x7E, # LDA $7E9D89
        0xAA, # TAX
        0xA9, 0x00, # LDA #$00
        0x9F, 0x8A, 0x9D, 0x7E, # STA $7E9D8A,X

        # Original code
        0xA9, 0x65, # LDA #$65
        0x85, 0x26, # STA $26
        0x6B, # RTL

        # StatusMenu__Main
        # Clear upper bits of A
        0x7B, # TDC
        # Change DP
        0x0B, # PHD
        0xF4, 0x00, 0x15, # PEA #$1500
        0x2B, # PLD

        0x22, 0xAB, 0x0A, 0xF0, # JSL $StatusMenu__Scrolling
        # Original code and return
        0x2B, # PLD
        0x7B, # TDC
        0xA0, 0x17, 0x64, # ldy #$6417
        0x5C, 0x37, 0x0C, 0xF0, # jml $f00c37 StatusMenu__CopyOfShowCursor

        # StatusMenu__Scrolling:
        # Get scroll value
        0xAF, 0x89, 0x9D, 0x7E, # lda $7e9d89
        0xAA, # tax
        0xBF, 0x8A, 0x9D, 0x7E, # lda $7e9d8a,x
        0x85, 0x08, # sta $08 .scroll
        # Get cursor position on screen
        0xAD, 0x4E, 0x00, # lda $004e
        0x38, #sec
        0xE5, 0x08, # sbc $08 .scroll
        # Is cursor out of range?
        0x30, 0x0A, # bmi $StatusMenu__Scrolling_Up
        0xC9, 0x0F, # cmp #$0f
        0xB0, 0x03, # bcs $StatusMenu__Scrolling_Down
        0x4C, 0x37, 0x0B, # jmp $_StatusMenu__Scrolling_return

        # StatusMenu__Scrolling_Down:
        0x38, # SEC
        0xE9, 0x0E, # SBC #$0E

        # StatusMenu__Scrolling_Up
        # Add to scrolling
        0x18, # CLC
        0x7F, 0x8A, 0x9D, 0x7E,  # ADC $7E9D8A,X
        0x9F, 0x8A, 0x9D, 0x7E,  # STA $7E9D8A,X
        0x85, 0x08, # sta $08 .scroll
        0x85, 0x09, # sta $09 .cursor
        0x64, 0x0A, # stz $0A .cursorH

        # Loop through all 15 skills to show on screen
        0xA2, 0xC9, 0x80, # LDX #$80C9
        0x86, 0x0B, # STX $0B .bg3addr
        0xA0, 0x00, 0x00, # LDY #$0000

        # StatusMenu__Scrolling_Loop:
        0x5A, #PHY

        # Prepare writing skill
        0xC2, 0x20, # REP #$20
        0xA6, 0x09, # LDX $09 .cursor
        0xE6, 0x09, # INC $09 .cursor
        0xBF, 0x8A, 0x9D, 0x7E, # lda $7e9d8a,x
        0x29, 0xFF, 0x00, # and #$00FF
        0xC9, 0xFF, 0x00, # cmp #$00ff
        0xF0, 0x16, # beq StatusMenu__Scrolling_Loop_empty
        0x85, 0x0D, # sta $0d .temp
        0x0A, #ASL
        0x0A, #ASL
        0x0A, #ASL
        0x69, 0xA0, 0xCE, # ADC #$CEA0
        0x38, # SEC
        0xE5, 0x0D, # sbc $0D .temp
        0x85, 0x38, # sta $38 .Param_source
        0xA9, 0xD8, 0x00, # lda #$00D8
        0xE2, 0x20,  # SEP #$20
        0x85, 0x3A, # sta $3A .Param_sourceBank
        0x80, 0x0B,  # bra StatusMenu__Scrolling_Loop_skip

        # StatusMenu__Scrolling_Loop_empty:
        0xE2, 0x20, # SEP #$20

        0xA2, 0x38, 0x0B, # LDX #$0B38_StatusMenu__Scrolling_Empty
        0x86, 0x38, # STX $38 .Param_source
        0xA9, 0xF0, # LDA $F0 StatusMenu__Scrolling_Empty
        0x85, 0x3A, # sta $3A .Param_sourceBank

        # StatusMenu__Scrolling_Loop_skip:
        # Dest
        0xA6, 0x0B, # LDX $0B .bg3addr
        0x86, 0x3B, # STX $3B .Param_dest
        # Length
        0xA9, 0x07, # LDA $07
        0x85, 0x3D, # sta $3D .Param_length

        0x22, 0xA3, 0x18, 0xF0, # JSL $F018A3 Gui__WriteTextLength

        # Next
        0xC2, 0x21, # REP #$21
        0xA5, 0x0B,  #lda $0B .bg3addr
        0x69, 0x80, 0x00, # ADC #$0080
        0x85, 0x0B, # sta $0B .bg3addr
        0xE2, 0x20, # SEP #$20

        0x7A, # PLY
        0xC8, # INY
        0xC0, 0x10, 0x00, # CPY #$0010
        0x90, 0xAE, # BCC StatusMenu__Scrolling_Loop
        0xA2, 0x00, 0x10, # LDX #$1000
        0x8E, 0x12, 0x00, # STX #$0012

        # StatusMenu__Scrolling_return:
        0x6B, # RTL
        # StatusMenu__Scrolling_Empty:
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

        # StatusMenu__CopyOfShowCursor
        # Keep cursor position
        0xA5, 0x4E, #lda $4e
        0x48, # PHA

        # Subtrack scrolling
        0xAF, 0x89, 0x9D, 0x7E, # lda $7e9d89
        0xAA, # TAX
        0xA5, 0x4E, # lda $4e
        0x38, # sec
        0xFF, 0x8A, 0x9D, 0x7E, # sbc $7e9d8a,x
        0x85, 0x4E, # sta $4e

        # First call
        0x84, 0xE7, # sty $e7
        0xA9, 0xC3, # lda #$c3
        0x85, 0xE9, # sta $e9

        # Second call
        0x8B, # phb
        0xA9, 0x00,# lda #$00
        0x48, # pha
        0xAB, # plb

        # f00c53:
        # a_c30677_c3067c:
        0xAF, 0x12, 0x42, 0x00, # lda $004212
        0x29, 0x40, # and #$40
        0xF0, 0xF8, # beq a_c30677_c3067c

        0xA5, 0x53, # lda $53
        0x8D, 0x1B, 0x21, # sta $211b
        0x9C, 0x1B, 0x21, # stz $211b ???
        0xA5, 0x4E, # lda $4e
        0x8D, 0x1C, 0x21, #sta $211c
        0x8D, 0x1C, 0x21, #sta $211c ???
        0xAD, 0x34, 0x21, # lda $2134
        0x18, # clc
        0x65, 0x4D, # adc $4d
        0x85, 0x4B, # sta $4b

        # a_c36409_c306c5:
        0xA5, 0x53, # lda $53
        0x3A, # dec
        0xC5, 0x4D, # cmp $4d
        0xB0, 0x0C, # bcs $a_c36409_c306dd
        0xA5, 0x53, # lda $53
        0x3A, # dec
        0x38, # sec
        0xE5, 0x51, # sbc $51
        0x85, 0xE0, # sta $e0
        0x85, 0xE2, # sta $e2
        0x80, 0x08, # bra a_c36409_c306e5

        # a_c36409_c306dd:
        0xA5, 0x53, # lda $53
        0x85, 0xE0, # sta $e0
        0xA5, 0x4D, # lda $4d
        0x85, 0xE2, # sta $e2

        # a_c36409_c306e5:
        0xA5, 0x54, # lda $54
        0x3A, # dec
        0xC5, 0x4E, # cmp $4e
        0xB0, 0x0A, # bcs $a_c36409_c306f6
        0xA5, 0x54, # lda $54
        0x3A, #dec
        0x38, #sec
        0xE5, 0x52, # sbc $52
        0x85, 0xE1, # sta $e1
        0x80, 0x04, # bra a_c36409_c306fa
        # a_c36409_c306f6:
        0xA5, 0x4E, # lda $4e
        0x85, 0xE1, # sta $e1
        # a_c36409_c306fa:
        0xAF, 0x12, 0x42, 0x00, # lda $004212
        0x29, 0x40, # and #$40
        0xF0, 0xF8, # beq $a_c36409_c306fa
        0xA5, 0xE0, # lda $e0
        0x8D, 0x1B, 0x21, # sta $211b
        0x9C, 0x1B, 0x21, # stz $211b
        0xA5, 0xE1, # lda $e1
        0x8D, 0x1C, 0x21, # sta $211c
        0x8D, 0x1C, 0x21, # sta $211c
        0xAD, 0x34, 0x21, # lda $2134

        0x18, #clc
        0x65, 0xE2, # adc $e2
        0x0A, # ASL
        0xEB, # XBA
        0xA5, 0x00, # LDA $00
        0xEB, # XBA
        0xA8, # TAY
        0xB7, 0xE7, # lda [$e7],y
        0x85, 0x55, # sta $55
        0x64, 0x56, # stz $56
        0xC8, # INY
        0xB7, 0xE7, # lda [$e7],y
        0x85, 0x57, # sta $57
        0x64, 0x58, # stz $58
        0xAB, # plb
        0x68, # PLA
        0x85, 0x4E, # sta $4e
        0x6B # RTL
    ])
    status_sub.write(fout)

def improve_rage_menu(fout):
    add_common_menu_stuff(fout)

    rage_sub = Substitution()
    rage_sub.set_location(0x321D9)
    rage_sub.bytestring = bytes([0x22, 0xD9, 0x0C, 0xF0])
    rage_sub.write(fout)

    rage_sub.set_location(0x328BA)
    rage_sub.bytestring = bytes([0x22, 0x1D, 0x0D, 0xF0, 0xF0, 0x01, 0x60])
    rage_sub.write(fout)

    rage_sub.set_location(0x300CD9)
    rage_sub.bytestring = bytes([
        # Initialize rage menu
        0x9C, 0x00, 0x01, # STZ $0100
        0x9C, 0x01, 0x01, # STZ $0101
        0x9C, 0x02, 0x01, # STZ $0102
        # Loop:
        0xAD, 0x12, 0x42, # LDA
        0x30, 0xFB, # BMI Loop
        # Loop2:
        0xAD, 0x12, 0x42, # LDA
        0x10, 0xFB, # BPL Loop2
        0xA0, 0x00, 0x6C, # STA #$6C00
        0x8C, 0x16, 0x21, # STY
        0xA9, 0x01, # LDA #$01
        0x8D, 0x00, 0x43, # STA
        0xA9, 0x18, # LDA
        0x8D, 0x01, 0x43, # STA
        0xA0, 0x16, 0x15, # STA #$1516
        0xA9, 0xF0, # LDA
        0x8C, 0x02, 0x43, # STY
        0x8D, 0x04, 0x43, # STA
        0xA0, 0x00, 0x02, # STA #$0200
        0x8C, 0x05, 0x43, # STY
        0xA9, 0x01, # LDA
        0x8D, 0x0B, 0x42, # STA
        0xA9, 0x1D, # LDA #$1D       ; C3/28BA
        0x85, 0x26, # STA $26        ; Next: Sustain menu
        0x6B, # RTL
        0x6B, # RTL

        0xA9, 0x0A, # LDA
        0x85, 0x26, # STA $26
        0x6B, # RTL

        # $F00D1D
        # Sustain Rage menu:
        0xA9, 0x03, # LDA #$03       ; List type: Rages
        0x85, 0x2A, # STA $2A        ; Set redraw mode
        0xAD, 0x00, 0x01,
        0xD0, 0x1D, # BNE
        # Set to upload BG1 tilemap A
        0xA0, 0x00, 0x00, # LDY #$0000     ; $0000
        0x84, 0x14, # STY $14        ; Set VRAM ptr
        0xA0, 0x49, 0x38, # LDY #$3849     ; 7E/3849
        0x84, 0x16, # STY $16        ; Set src LBs
        0xA9, 0x7E, # LDA #$7E       ; Bank: 7E
        0x85, 0x18, # STA $18        ; Set src HB
        0xA0, 0x00, 0x08, # LDY #$0800     ; Bytes: 2048
        0x84, 0x12, # STY $12        ; Set data size
        0xA9, 0x17, # LDA #$17
        0x8D, 0x2C, 0x21, # STA $212C
        0x8D, 0x2D, 0x21, # STA $212D
        0x80, 0x1B, # BRA
        0xA2, 0x00, 0x44, # LDX #$4400
        0x86, 0x14, # STX
        0xA2, 0x49, 0x80, # LDX #$8049
        0x86, 0x16, # STX
        0xA9, 0x7E, # LDA
        0x85, 0x18, # STA $18
        0xA2, 0x00, 0x08, # LDX #$0800
        0x86, 0x12, # STX
        0xA9, 0x06, # LDA
        0x8D, 0x2C, 0x21, # STA $212C
        0x8D, 0x2D, 0x21, # STA $212D
        0x7B, # TDC
        0x0B, # PHD
        0xF4, 0x00, 0x15, # PEA
        0x2B, # PLD
        0xAD, 0x01, 0x01, # LDA
        0x85, 0x08, # STA
        0x22, 0x73, 0x0D, 0xF0, # JSL
        0x2B, # PLD
        0x7B, # TDC
        0xAD, 0x00, 0x01, # LDA $0100
        0x6B, #RTL

        # $F00D73 show info on selected rage if a is pushed
        0xAD, 0x00, 0x01,
        0xD0, 0x39, # BNE $F00DB1
        0xAD, 0x08, 0x00, #LDA $0008        ; No-autofire keys
        0x29, 0x80, # AND #$80 ; Pushing A?
        0xF0, 0x16, # BEQ end ; Branch if not
        0xAD, 0x4B, 0x00, # LDA $004B        ; Selected slot
        0x4A, # LSR
        0x4A, # LSR
        0x4A, # LSR
        0xA8, # TAY
        0xAD, 0x4B, 0x00, # LDA $004B        ; Selected slot
        0x29, 0x07, # AND #$07
        0xAA, # TAX
        0xBF, 0x40, 0x11, 0xF0, # LDA $F01140,X   ; 2^X
        0x39, 0x2C, 0x1D, # AND $1D2C,Y  ; known rages
        0xD0, 0x13, # BNE
        # end:
        0x6B, #RTL

        # F00D96:
        0x9C, 0x00, 0x01, # STZ $0100
        0x9C, 0x01, 0x01, # STZ $0101
        0x22, 0x32, 0x19, 0xF0, # JSL $F01932
        0x9C, 0x09, 0x00, # STZ $0009
        0x22, 0xB6, 0x13, 0xF0,
        0x6B, # RTL

        0xA9, 0x01, # LDA #$01
        0x8D, 0x00, 0x01, # STA $0100
        0x22, 0x2B, 0x19, 0xF0, # JSL $F0192B

        # F00DB1:
        0xAD, 0x09, 0x00, # LDA
        0x29, 0x80, # AND #$80
        0xD0, 0xDE, # BNE $0d96
        0xAD, 0x0B, 0x00, # LDA $000B
        0x89, 0x04, # BIT #$04
        0xD0, 0x16, # BNE $0DD5
        0x89, 0x08, # BIT #$08
        0xD0, 0x03, # BNE $0DC6
        0x4C, 0xE3, 0x0D, # JMP $0DE3
        # 0DC6:
        0xAD, 0x01, 0x01, # LDA $0101
        0xF0, 0x18, # BEQ
        0xEE, 0x01, 0x01, # INC $0101
        0x22, 0x32, 0x19, 0xF0, # JSL $F01932
        0x4C, 0xE3, 0x0D, # JMP
        # 0DD5:
        0xAD, 0x02, 0x01, # LDA $0102
        0xF0, 0x09, # BEQ
        0x30, 0x07, # BMI
        0xCE, 0x01, 0x01, # DEC $0101
        0x22, 0x32, 0x19, 0xF0, # JSL $F01932
        # 0DE3:
        0x22, 0xB6, 0x13, 0xF0, # JSL $F013B6
        0xAD, 0x4B, 0x00, # LDA
        0xC2, 0x20, # SEP #$20
        0xEB, # XBA
        0x4A, # LSR
        0x4A, # LSR
        0x4A, # LSR
        0x85, 0x0B, # STA $0B
        0xA9, 0x00, 0x00, # LDA # $0000
        0xE2, 0x20, # REP #$20
        0xA2, 0xB9, 0x11, # LDX #$11B9
        0x86, 0x1C, # STX $1C
        0xA9, 0xF0, # LDA
        0x85, 0x1E, # STA $1E
        0xA2, 0x0D, 0x82, # LDX #$820D
        0x86, 0x1F, # STX $1F
        0x22, 0xBC, 0x18, 0xF0,# JSL $F018BC
        0xA6, 0x0B, # LDX $0B
        0xBF, 0x10, 0x00, 0xCF, # LDA $CF0010,X
        0x85, 0x1C, # STA $1C
        0x64, 0x1D, # STZ $1D
        0xA2, 0x15, 0x82, # LDX #$8215
        0x86, 0x1E, # STX $1E
        0xA9, 0x20, # LDA #$20
        0x85, 0x20, # STA $20
        0x22, 0x07, 0x19, 0xF0, # JSL $F01907
        0xA2, 0xBC, 0x11,  # LDX #$11BC
        0x86, 0x1C, # STX $1C
        0xA9, 0xF0, # LDA #$F0
        0x85, 0x1E, # STA $1E
        0xA2, 0x19, 0x82, # LDX #$8219
        0x86, 0x1F, # STX $1F
        0x22, 0xBC, 0x18, 0xF0, # JSL $F018BC
        0xA6, 0x0B, # LDX $0B
        0xBF, 0x08, 0x00, 0xCF, # LDA $CF0008,X
        0x85, 0x1C, # STA $1C
        0xBF, 0x09, 0x00, 0xCF, # LDA $CF0009,X
        0x85, 0x1D, # STA $1D
        0xA2, 0x25, 0x82, # LDX #$8225
        0x86, 0x1E, # STX $1E
        0xA9, 0x20, # LDA #$20
        0x85, 0x20, # STA $20
        0x22, 0x07, 0x19, 0xF0, # JSL $F01907
        0xA2, 0x4D, 0x82, # LDX #$824D
        0x86, 0x0D, # STX $0D
        0x64, 0x0F, # STZ $0F
        0xA5, 0x08, # LDA $08
        0x85, 0x10, # STA $10
        0xA9, 0x40, # LDA #$40
        0x85, 0x11, # STA $11
        0x64, 0x12, # STZ $12
        0xA9, 0x1B, # LDA #$1B
        0x85, 0x13, # STA $13
        0xA9, 0x05, # LDA #$05
        0x85, 0x14, # STA $14
        0x64, 0x15, # STZ $15
        0xA2, 0x0D, 0x15, # LDX #$150D
        0x86, 0x1C, # STX $1C
        0xA2, 0xBF, 0x11, # LDX #$11BF
        0x86, 0x1E, # STX $1E
        0xA9, 0xF0, # LDA #$F0
        0x85, 0x20, # STA $20
        0xA9, 0x30, # LDA #$30
        0x85, 0x21, # STA $21
        0x22, 0x16, 0x17, 0xF0, # JSL $F01716
        0xE6, 0x12, # INC $12
        0x64, 0x16, # STZ $16
        0x64, 0x1A, # STZ $1A
        0xA6, 0x0B, # LDX $0B
        0x86, 0x18, # STX $18
        0xA6, 0x18, # LDX $18
        0x9B, # TXY
        0xC8, # INY
        0x84, 0x18, # STY $18
        0xBF, 0x1B, 0x00, 0xCF, # LDA $CF001B,X
        0x85, 0x17, # STA $17
        0x38, # SEC
        0x66, 0x17, # ROR $17
        0x90, 0x44, # BCC
        0xF0, 0x46, # BEQ
        0xA5, 0x1A, # LDA $1A
        0xF0, 0x1C, # BEQ
        0xE6, 0x13, 0xA2, 0x0D, 0x15, 0x86, 0x1C, 0xA2, 0x7F, 0x13,
        0x86, 0x1E, 0xA9, 0xF0, 0x85, 0x20, 0xA9, 0x20, 0x85, 0x21,
        0x22, 0x16, 0x17, 0xF0,
        0xC6, 0x13, 0xE6, 0x0F, 0xA5, 0x16, 0xC2, 0x20, 0x0A, 0xAA,
        0xBF, 0xD1, 0x11, 0xF0, 0x85, 0x1E, 0xA9, 0x20, 0x00, 0xE2, 0x20, 0x85,
        0x1A, 0x85, 0x21, 0xA9, 0xF0, 0x85, 0x20, 0xA2, 0x0D, 0x15, 0x86, 0x1C,
        0x22, 0x16, 0x17, 0xF0,
        0xE6, 0x16, 0x80, 0xB4, 0xA5, 0x16, 0xC9, 0x20,
        0xD0, 0xA1, 0xC6, 0x12, 0xA5, 0x12, 0x85, 0x0F, 0xE6, 0x10, 0xA2, 0x0D,
        0x15, 0x86, 0x1C, 0xA2, 0xC8, 0x11, 0x86, 0x1E, 0xA9, 0xF0, 0x85, 0x20,
        0xA9, 0x30, 0x85, 0x21,
        0x22, 0x16, 0x17, 0xF0,
        0xE6, 0x12, 0x64, 0x16,
        0x64, 0x1A, 0xA6, 0x0B, 0x86, 0x18, 0xA6, 0x18, 0x9B, 0xC8, 0x84, 0x18,
        0xBF, 0x14, 0x00, 0xCF, 0x85, 0x17, 0x38, 0x66, 0x17, 0x90, 0x44, 0xF0,
        0x46, 0xA5, 0x1A, 0xF0, 0x1C, 0xE6, 0x13, 0xA2, 0x0D, 0x15, 0x86, 0x1C,
        0xA2, 0x7F, 0x13, 0x86, 0x1E, 0xA9, 0xF0, 0x85, 0x20, 0xA9, 0x20, 0x85,
        0x21,
        0x22, 0x16, 0x17, 0xF0,
        0xC6, 0x13, 0xE6, 0x0F, 0xA5, 0x16, 0xC2,
        0x20, 0x0A, 0xAA, 0xBF, 0xD1, 0x11, 0xF0, 0x85, 0x1E, 0xA9, 0x20, 0x00,
        0xE2, 0x20, 0x85, 0x1A, 0x85, 0x21, 0xA9, 0xF0, 0x85, 0x20, 0xA2, 0x0D,
        0x15, 0x86, 0x1C,
        0x22, 0x16, 0x17, 0xF0,
        0xE6, 0x16, 0x80, 0xB4, 0xA5,
        0x16, 0xC9, 0x18, 0xD0, 0xA1, 0xA2, 0x51, 0x11, 0x86, 0x1C, 0xA9, 0xF0,
        0x85, 0x1E, 0xA2, 0xE9, 0x83, 0x86, 0x1F,
        0x22, 0xBC, 0x18, 0xF0,
        0xA6,
        0x0B, 0xBF, 0x17, 0x00, 0xCF, 0x85, 0x1E, 0xA2, 0x29, 0x84, 0x86, 0x1C,
        0x22, 0x94, 0x17, 0xF0,
        0xA2, 0x5C, 0x11, 0x86, 0x1C, 0xA9, 0xF0, 0x85,
        0x1E, 0xA2, 0x8D, 0x84, 0x86, 0x1F,
        0x22, 0xBC, 0x18, 0xF0,
        0xA6, 0x0B,
        0xBF, 0x17, 0x00, 0xCF, 0x49, 0xFF, 0x3F, 0x18, 0x00, 0xCF, 0x85, 0x1E,
        0xA2, 0xCD, 0x84, 0x86, 0x1C,
        0x22, 0x94, 0x17, 0xF0,
        0xA2, 0x67, 0x11,
        0x86, 0x1C, 0xA9, 0xF0, 0x85, 0x1E, 0xA2, 0xA9, 0x84, 0x86, 0x1F,
        0x22, 0xBC, 0x18, 0xF0,
        0xA6, 0x0B, 0xBF, 0x17, 0x00, 0xCF, 0x1F, 0x18, 0x00,
        0xCF, 0x49, 0xFF, 0x3F, 0x19, 0x00, 0xCF, 0x85, 0x1E, 0xA2, 0xE9, 0x84,
        0x86, 0x1C,
        0x22, 0x94, 0x17, 0xF0,
        0xA2, 0x73, 0x11, 0x86, 0x1C, 0xA9,
        0xF0, 0x85, 0x1E, 0xA2, 0xCD, 0x83, 0x86, 0x1F,
        0x22, 0xBC, 0x18, 0xF0,
        0xA9, 0x24, 0x85, 0x1B, 0xAD, 0x4B, 0x00, 0xC2, 0x20, 0x0A, 0xAA, 0xBF,
        0x00, 0x46, 0xCF, 0xE2, 0x20, 0xC9, 0xEF, 0xD0, 0x06, 0xA9, 0x20, 0x85,
        0x1B, 0xA9, 0xEF, 0x48, 0xA9, 0x00, 0xEB, 0xC9, 0xEF, 0xD0, 0x06, 0xA9,
        0x20, 0x85, 0x1B, 0xA9, 0xEF, 0x85, 0x38,
        0x22, 0x21, 0x18, 0xF0, # JSL Get_attack_name
        0x86,
        0x38, 0x85, 0x3D, 0xA9, 0xE6, 0x85, 0x3A, 0xA2, 0x4F, 0x84, 0x86, 0x3B,
        0x22, 0xA3, 0x18, 0xF0,
        0x68, 0x85, 0x38,
        0x22, 0x21, 0x18, 0xF0, # JSL Get_attack_name
        0x86,
        0x38, 0x85, 0x3D, 0xA9, 0xE6, 0x85, 0x3A, 0xA2, 0x0F, 0x84, 0x86, 0x3B,
        0x22, 0xA3, 0x18, 0xF0,
        0xA2, 0x80, 0x11, 0x86, 0x1C, 0xA9, 0xF0, 0x85,
        0x1E, 0xA2, 0x4D, 0x85, 0x86, 0x1F,
        0x22, 0xBC, 0x18, 0xF0,
        0xA6, 0x0B,
        0xBF, 0x1F, 0x00, 0xCF, 0x29, 0x30, 0xC9, 0x20, 0xF0, 0x07, 0xC9, 0x32,
        0xB0, 0x4E, 0x4C, 0xDA, 0x10, 0xA2, 0x89, 0x11, 0x86, 0x24, 0xA9, 0xF0,
        0x85, 0x26, 0xA2, 0x8F, 0x85, 0x86, 0x27, 0xA5, 0x1B, 0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0xA6, 0x0B, 0xBF, 0x1F, 0x00, 0xCF, 0x48, 0x4A, 0xB0,
        0x16, 0xA2, 0xAA, 0x11, 0x86, 0x24, 0xA9, 0xF0, 0x85, 0x26, 0xA2, 0xA1,
        0x85, 0x86, 0x27, 0xA5, 0x1B, 0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0x68,
        0x29, 0x0F, 0x1A, 0x4A, 0x18, 0x69, 0xB5, 0x8F, 0x9F, 0x85, 0x7E, 0xA5,
        0x1B, 0x8F, 0xA0, 0x85, 0x7E, 0x4C, 0x18, 0x11, 0xA2, 0x9B, 0x11, 0x86,
        0x24, 0xA9, 0xF0, 0x85, 0x26, 0xA2, 0x8F, 0x85, 0x86, 0x27, 0xA5, 0x1B,
        0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0x4C, 0x18, 0x11, 0xA2, 0x92, 0x11,
        0x86, 0x24, 0xA9, 0xF0, 0x85, 0x26, 0xA2, 0x8F, 0x85, 0x86, 0x27, 0xA5,
        0x1B, 0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0xA6, 0x0B, 0xBF, 0x1F, 0x00,
        0xCF, 0x29, 0x3F, 0xC2, 0x20, 0x0A, 0xAA, 0xBF, 0x11, 0x12, 0xF0, 0x85,
        0x24, 0xA9, 0x00, 0x00, 0xE2, 0x20, 0xA9, 0xF0, 0x85, 0x26, 0xA2, 0xA1,
        0x85, 0x86, 0x27, 0xA5, 0x1B, 0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0xA6,
        0x0B, 0xBF, 0x1F, 0x00, 0xCF, 0x10, 0x16, 0xA2, 0xAD, 0x11, 0x86, 0x24,
        0xA9, 0xF0, 0x85, 0x26, 0xA2, 0xCF, 0x85, 0x86, 0x27, 0xA5, 0x1B, 0x85,
        0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0xA5, 0x10, 0x38, 0xE5, 0x14, 0x1A, 0x8D,
        0x02, 0x01,
        0x6B, # RTL

        # TABLE
        # F01140: 2^X
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
        # TABLE
        # F01148: rage strings
        0xB9, 0xB4, 0xCD, 0xFF, 0x83, 0xA6, 0xA0, 0xC1, 0x00, # "50% Dmg:"
        0x80, 0x9B, 0xAC, 0xA8, 0xAB, 0x9B, 0xFF, 0x87, 0x8F, 0xC1, 0x00, # "Absorb HP:"
        0x8D, 0xA8, 0xFF, 0x9E, 0x9F, 0x9F, 0x9E, 0x9C, 0xAD, 0xC1, 0x00, # "No effect:"
        0x96, 0x9E, 0x9A, 0xA4, 0xFF, 0xA9, 0xA8, 0xA2, 0xA7, 0xAD, 0xC1, 0x00, # "Weak point:"
        0x91, 0x9A, 0xA0, 0x9E, 0xFF, 0xAC, 0xA4, 0xA2, 0xA5, 0xA5, 0xAC, 0xC1, 0x00, # "Rage skills:"
        0x92, 0xA9, 0x9E, 0x9C, 0xA2, 0x9A, 0xA5, 0xC1, 0x00, # "Special:"
        0x9D, 0x9A, 0xA6, 0x9A, 0xA0, 0x9E, 0xFF, 0xB1, 0x00, # "damage x"
        0x9D, 0x9A, 0xA6, 0x9A, 0xA0, 0x9E, 0xFF, 0xCA, 0x00, # "damage +"
        0xAB, 0x9E, 0x9F, 0xA5, 0x9E, 0x9C, 0xAD, 0xFF, 0x9B, 0xAB, 0x9E, 0x9A, 0xA4, 0xBF, 0x00, # "reflect break?"
        0xC5, 0xB9, 0x00, # ".5"
        0xAE, 0xA7, 0x9B, 0xA5, 0xA8, 0x9C, 0xA4, 0x9A, 0x9B, 0xA5, 0x9E, 0x00, #  # "Unblockable"
        # TABLE
        # F011B9: rage strings 2
        0x8B, 0xAF, 0x00, # "Lv"
        0x87, 0x8F, 0x00, # "HP"
        0x92, 0xAD, 0x9A, 0xAD, 0xAE, 0xAC, 0xC1, 0xFF, 0x00, # "Status: "
        0x88, 0xA6, 0xA6, 0xAE, 0xA7, 0x9E, 0xC1, 0xFF, 0x00, # "Immune: "
        # TABLE
        # pointers to status text
        0x99, 0x12, 0x9F, 0x12, 0xA6, 0x12, 0xAD, 0x12,
        0xB5, 0x12, 0xBC, 0x12, 0xC0, 0x12, 0xC8, 0x12, 0xCE, 0x12, 0xD8, 0x12,
        0xE3, 0x12, 0xE9, 0x12, 0xEE, 0x12, 0xF6, 0x12, 0xFE, 0x12, 0x06, 0x13,
        0x0C, 0x13, 0x12, 0x13, 0x18, 0x13, 0x1D, 0x13, 0x23, 0x13, 0x28, 0x13,
        0x2E, 0x13, 0x36, 0x13, 0x3E, 0x13, 0x44, 0x13, 0x4A, 0x13, 0x52, 0x13,
        0x58, 0x13, 0x60, 0x13, 0x6A, 0x13, 0x76, 0x13, 0x99, 0x12, 0x9F, 0x12,
        0xA6, 0x12, 0xAD, 0x12, 0xB5, 0x12, 0xBC, 0x12, 0xC0, 0x12, 0xC8, 0x12,
        0xCE, 0x12, 0xD8, 0x12, 0xE3, 0x12, 0xE9, 0x12, 0xEE, 0x12, 0xF6, 0x12,
        0xFE, 0x12, 0x06, 0x13, 0x75, 0x12, 0x12, 0x13, 0x18, 0x13, 0x1D, 0x13,
        0x23, 0x13, 0x28, 0x13, 0x2E, 0x13, 0x36, 0x13, 0x7B, 0x12, 0x80, 0x12,
        0x4A, 0x13, 0x52, 0x13, 0x58, 0x13, 0x60, 0x13, 0x6A, 0x13, 0x76, 0x13,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x87, 0x12, 0x90, 0x12,
        # TABLE
        # special attack strings
        0x9D, 0x9A, 0xA7, 0x9C, 0x9E, 0x00, # "dance"
        0xAB, 0x9A, 0xA0, 0x9E, 0x00, # "rage"
        0x9F, 0xAB, 0xA8, 0xB3, 0x9E, 0xA7, 0x00, # "frozen"
        # 1287:
        0xA1, 0xA9, 0xFF, 0x9D, 0xAB, 0x9A, 0xA2, 0xA7, 0x00, # "hp drain"
        # 1290:
        0xA6, 0xA9, 0xFF, 0x9D, 0xAB, 0x9A, 0xA2, 0xA7, 0x00, # "mp drain"
        # 1299:
        0x9B, 0xA5, 0xA2, 0xA7, 0x9D, 0x00, # "blind"
        0xB3, 0xA8, 0xA6, 0x9B, 0xA2, 0x9E, 0x00, # "zombie"
        0xA9, 0xA8, 0xA2, 0xAC, 0xA8, 0xA7, 0x00, # "poison"
        0xA6, 0x9A, 0xA0, 0xA2, 0xAD, 0x9E, 0xA4, 0x00, # "magitek"
        0xAF, 0x9A, 0xA7, 0xA2, 0xAC, 0xA1, 0x00, # "vanish"
        0xA2, 0xA6, 0xA9, 0x00, # "imp"
        0xA9, 0x9E, 0xAD, 0xAB, 0xA2, 0x9F, 0xB2, 0x00, # "petrify"
        0x9D, 0x9E, 0x9A, 0xAD, 0xA1, 0x00, # "death"
        0x9C, 0xA8, 0xA7, 0x9D, 0x9E, 0xA6, 0xA7, 0x9E, 0x9D, 0x00, # "condemned"
        0xA7, 0x9E, 0x9A, 0xAB, 0xFF, 0x9D, 0x9E, 0x9A, 0xAD, 0xA1, 0x00, # "near death"
        0xA2, 0xA6, 0x9A, 0xA0, 0x9E, 0x00, # "image"
        0xA6, 0xAE, 0xAD, 0x9E, 0x00, # "mute"
        0x9B, 0x9E, 0xAB, 0xAC, 0x9E, 0xAB, 0xA4, 0x00, # "berserk"
        0x9C, 0xA8, 0xA7, 0x9F, 0xAE, 0xAC, 0x9E, 0x00, # "confuse"
        0xAC, 0x9E, 0xA2, 0xB3, 0xAE, 0xAB, 0x9E, 0x00, # "seizure"
        0xAC, 0xA5, 0x9E, 0x9E, 0xA9, 0x00, # "sleep"
        0x9F, 0xA5, 0xA8, 0x9A, 0xAD, 0x00, # "float"
        0xAB, 0x9E, 0xA0, 0x9E, 0xA7, 0x00, # "regen"
        0xAC, 0xA5, 0xA8, 0xB0, 0x00, # "slow"
        0xA1, 0x9A, 0xAC, 0xAD, 0x9E, 0x00, # "haste"
        0xAC, 0xAD, 0xA8, 0xA9, 0x00, # "stop"
        0xAC, 0xA1, 0x9E, 0xA5, 0xA5, 0x00, # "shell"
        0xA9, 0xAB, 0xA8, 0xAD, 0x9E, 0x9C, 0xAD, 0x00, # "protect"
        0xAB, 0x9E, 0x9F, 0xA5, 0x9E, 0x9C, 0xAD, 0x00, # "reflect"
        0x9C, 0xA8, 0xAF, 0x9E, 0xAB, 0x00, # "cover"
        0xAB, 0xAE, 0xA7, 0xA2, 0x9C, 0x00, # "runic"
        0xAB, 0x9E, 0xAB, 0x9A, 0xA2, 0xAC, 0x9E, 0x00, # "reraise"
        0xA6, 0xA8, 0xAB, 0xA9, 0xA1, 0x00, # "morph"
        0x9C, 0x9A, 0xAC, 0xAD, 0xA2, 0xA7, 0xA0, 0x00, # "casting"
        0x9D, 0xA2, 0xAC, 0x9A, 0xA9, 0xA9, 0x9E, 0x9A, 0xAB, 0x00, # "disappear"
        0xA2, 0xA7, 0xAD, 0x9E, 0xAB, 0x9C, 0x9E, 0xA9, 0xAD, 0xA8, 0xAB, 0x00, # "interceptor"
        # 1376:
        0x9F, 0xA5, 0xA8, 0x9A, 0xAD, 0xA2, 0xA7, 0xA0, 0x00, # "floating"
        0xC6, 0x00, # ","
        0x00,
        0x22, 0xFC, 0x17, 0xF0,
        0xA9, 0x06, 0x8D,
        0x2C, 0x21, 0x8D, 0x2D, 0x21,
        0x22, 0xFC, 0x17, 0xF0,
        0xA9, 0x06, 0x8D,
        0x2C, 0x21, 0x8D, 0x2D, 0x21, 0xAD, 0x09, 0x00, 0x29, 0x80, 0xF0, 0xED,
        0x22, 0x32, 0x19, 0xF0,
        0x22, 0xB6, 0x13, 0xF0,
        0x22, 0xFC, 0x17, 0xF0,
        0xA9, 0x17, 0x8D, 0x2C, 0x21, 0x8D, 0x2D, 0x21,
        0x6B,

        # F013B6:
        0x08, # PHP
        0x8B, # PHB
        0xF4, 0x7E, 0x04, # PEA #$047e
        0xAB, # PLB
        0x28, #PLP
        0xA0, 0x20, 0x00, # LDY #$0020
        0xA2, 0x4B, 0x80, # LDX #$804b
        0x9E, 0xC0, 0x01, # STZ #$01C0, X
        0x9E, 0x00, 0x02,
        0x9E, 0x40, 0x02,
        0x9E, 0x80, 0x02,
        0x9E, 0xC0, 0x02,
        0x9E, 0x00, 0x03,
        0x9E, 0x40, 0x03,
        0x9E, 0x80, 0x03,
        0x9E, 0xC0, 0x03,
        0x9E, 0x00, 0x04,
        0x9E, 0x40, 0x04,
        0x9E, 0x80, 0x04,
        0x9E, 0xC0, 0x04,
        0x9E, 0x00, 0x05,
        0x9E, 0x40, 0x05,
        0x9E, 0x80, 0x05,
        0x9E, 0xC0, 0x05,
        0x9E, 0x00, 0x06,
        0x9E, 0x40, 0x06,
        0x9E, 0x80, 0x06,
        0x9E, 0xC0, 0x06,
        0x9E, 0x00, 0x07,
        0x9E, 0x40, 0x07,
        0x9E, 0x80, 0x07,
        0x9E, 0xC0, 0x07,
        0xE8, # INX
        0xE8, # INX
        0x88, # DEY
        0xD0, 0xB0, # BNE $13C3
        0xAB, # PLB
        0x28, # PLP
        0x6B # RTL
        ])
    rage_sub.write(fout)

    rage_sub.set_location(0x301516)
    rage_sub.bytestring = bytes([
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x02,
        0x0E, 0x02, 0x0E, 0x07, 0x1F, 0x07, 0x1F, 0x0F, 0x3F, 0x0F, 0x2F, 0x1F,
        0x2F, 0x17, 0x17, 0x17, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0x80, 0xC0, 0x00, 0xC0,
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x3C, 0x0C, 0x7E, 0x1E,
        0x7B, 0x3F, 0x3D, 0x3D, 0x7B, 0x1E, 0x73, 0x3D, 0x00, 0x39, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x10, 0xE0, 0x30, 0xE0, 0xF0,
        0xE0, 0xF0, 0xE0, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x24, 0x00, 0x15, 0x12, 0x0E, 0x0A,
        0xBB, 0x07, 0x0A, 0x5D, 0x1F, 0x05, 0x24, 0x0F, 0x04, 0x12, 0x00, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x80, 0xA0, 0x00, 0x00, 0xD0,
        0x00, 0x00, 0x80, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x20, 0x0F,
        0x40, 0x10, 0x20, 0x20, 0x1F, 0x10, 0x00, 0x0F, 0x0F, 0x00, 0x01, 0x07,
        0x06, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0xC0, 0x20, 0x20, 0x40, 0x10,
        0x80, 0x20, 0x80, 0xC0, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1B, 0x00, 0x0A, 0x0D, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05,
        0x11, 0x05, 0x20, 0x08, 0x40, 0x10, 0x7F, 0x20, 0x00, 0x3F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
        0x40, 0x40, 0xC0, 0x20, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x01, 0x0F, 0x03, 0x1F, 0x07,
        0x3F, 0x0F, 0x0F, 0x1F, 0x07, 0x07, 0x03, 0x03, 0x06, 0x01, 0x0C, 0x03,
        0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0xE0, 0xF8, 0xC0, 0xF0, 0x80, 0xE0, 0x00, 0xC0, 0x80, 0x80,
        0xC0, 0xC0, 0x80, 0xE0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0A, 0x02,
        0x15, 0x05, 0x0E, 0x0A, 0x2E, 0x07, 0x2E, 0x17, 0x2E, 0x17, 0x04, 0x17,
        0x11, 0x02, 0x0A, 0x08, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x80, 0x00, 0x80, 0x40, 0x80, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x04, 0x02, 0x4E, 0x02, 0x2B, 0x27, 0x33, 0x15, 0x33, 0x19,
        0x2E, 0x19, 0x64, 0x17, 0x3F, 0x32, 0x1F, 0x1F, 0x00, 0x0F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x20, 0x00, 0x40, 0x90, 0x40, 0xA0, 0x40, 0xA0, 0xC0, 0x20,
        0xC0, 0x60, 0x80, 0xE0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        # $F01716:
        0xA6, 0x1E, 0x86, 0x24, 0xA5, 0x20, 0x85, 0x26,
        0x22, 0x8B, 0x17, 0xF0,
        0x84, 0x22, 0xA6, 0x1C, 0xBD, 0x06, 0x00, 0x38, 0xFD, 0x02, 0x00, 0xC5,
        0x22, 0xF0, 0x10, 0x30,
        0x03, 0x4C, 0x41, 0x17, 0xA6, 0x1C, 0xFE, 0x03,
        0x00, 0xBD, 0x05, 0x00, 0x9D, 0x02, 0x00, 0xBD, 0x03, 0x00, 0xDD, 0x07,
        0x00, 0xB0, 0x36, 0xDD, 0x08, 0x00, 0x90, 0x31, 0xA6, 0x1C, 0xBD, 0x04,
        0x00, 0x8D, 0x02, 0x42, 0xBD, 0x03, 0x00, 0x8D, 0x03, 0x42, 0xA4, 0x1E,
        0x84, 0x24, 0xA5, 0x20, 0x85, 0x26, 0xBD, 0x02, 0x00, 0x0A, 0xC2, 0x21,
        0x7D, 0x00, 0x00, 0x6D, 0x16, 0x42, 0x85, 0x27, 0xA9, 0x00, 0x00, 0xE2,
        0x20, 0xA5, 0x21, 0x85, 0x29,
        0x22, 0xD5, 0x18, 0xF0,
        0xA6, 0x1C, 0xBD,
        0x02, 0x00, 0x18, 0x65, 0x22, 0x9D, 0x02, 0x00,
        0x6B, # RTL

        # $F0178B:
        0xA0, 0xFF, 0xFF,
        0xC8, 0xB7, 0x24, 0xD0, 0xFB,
        0x6B, # RTL

        # $F01794:
        0xA5, 0x1E, 0xF0, 0x43, 0x1A, 0xF0,
        0x41, 0x64, 0x1F, 0x38, 0xE6, 0x1F, 0x26, 0x1E, 0x90, 0xFA, 0xF0, 0x35,
        0xA6, 0x1C, 0xA5, 0x1F, 0x0A, 0x0A, 0x69, 0x7C, 0x9F, 0x00, 0x00, 0x7E,
        0x1A, 0x9F, 0x40, 0x00, 0x7E, 0x1A, 0x9F, 0x02, 0x00, 0x7E, 0x1A, 0x9F,
        0x42, 0x00, 0x7E, 0xA9, 0x35, 0x9F, 0x01, 0x00, 0x7E, 0x9F, 0x41, 0x00,
        0x7E, 0x9F, 0x03, 0x00, 0x7E, 0x9F, 0x43, 0x00, 0x7E, 0xE8, 0xE8, 0xE8,
        0xE8, 0x86, 0x1C, 0x80, 0xC3, 0x6B, 0xA2, 0xEE, 0x17, 0x86, 0x20, 0xA9,
        0xF0, 0x85, 0x22, 0xA6, 0x1C, 0x86, 0x23,
        0x22, 0x8A, 0x18, 0xF0,
        0x6B, # RTL
        0xFF, 0x80, 0xA5, 0xA5, 0xFF, 0x9E, 0xA5, 0x9E, 0xA6, 0x9E, 0xA7, 0xAD,
        0xAC, 0x00,

        # F017FC:
        0xA9, 0x81, 0x8D, 0x00, 0x42, 0x8D, 0x24, 0x00, 0x58, 0xAD,
        0x24, 0x00, 0xD0, 0xFB, 0x78, 0xAD, 0x44, 0x00, 0x8D, 0x00, 0x21, 0xAD,
        0x43, 0x00, 0x8D, 0x0C, 0x42, 0xAD, 0xB5, 0x00, 0x8D, 0x06, 0x21, 0x9C,
        0xAE, 0x00, 0x6B])
    rage_sub.write(fout)

    _rage_dance_common(fout)

# rage and dance both require something in this block, but I haven't
# narrowed down exactly what
def _rage_dance_common(fout):
    rage_dance_sub = Substitution()
    rage_dance_sub.set_location(0x301932)
    rage_dance_sub.bytestring = bytes([
        0xA9, 0x21, # LDA #$21
        0x8F, 0x40, 0x21, 0x00, # STA $002140
        0x6B, # RTL
        0x08, # PHP
        0xC2, 0x30, # REP #$30
        0x48, #PHA
        0xDA, #PHX
        0x5A, #PHY
        0x0B, #PHD
        0xA9, 0x00, 0x15, # LDA #$1500
        0x5B, # TCD
        0xA9, 0x00, 0x00, # LDA #$0000
        0xE2, 0x20, # SEP #$20
        0x22, 0x2B, 0x1B, 0xF0, # JSR #$F01B2B
        0xC2, 0x30, # REP #$30
        0x2B,   # PLD
        0x7A,   # PLY
        0xFA,   # PLX
        0x68,   # PLA
        0x28,   # PLP
        0xA5, 0x09, # LDA $09   ; No-autofire keys
        0x89, 0x80, # BIT #$80  ; Pushing B?
        0x5C, 0xB4, 0x28, 0xC3, # JMP #$C328B4 (sustain dance menu)
        0x08, # PHP
        0xC2, 0x30, # REP $30
        0x48, #PHA
        0xDA, #PHX
        0x5A, #PHY
        0x0B, #PHD
        0xA9, 0x00, 0x15, # LDA #$1500
        0x5B, #TCD
        0xA9, 0x00, 0x00, # LDA #$0000
        0xE2, 0x20, # SEP #$20
        0x22, 0xA2, 0x19, 0xF0, # JSR #$F019A2
        0xC2, 0x30, # REP #$30
        0x2B,   # PLD
        0x7A,   # PLY
        0xFA,   # PLX
        0x68,   # PLA
        0x28,   # PLP
        0xA9, 0x1C, # LDA #$1C  ; C3/22AA
        0x85, 0x26, # STA $26   ; Next: Sustain menu
        0x5C, 0xF4, 0x21, 0xC3, #JMP #$C321F4 (initialize dance menu)
        0x08,# PHP
        0xC2, 0x30, # REP #$30
        0x48,   #PHA
        0xDA,   #PHX
        0x5A,   #PHY
        0x0B,   #PHD
        0xA9, 0x00, 0x15,   # LDA #$1500
        0x5B,   #TCD
        0xA9, 0x00, 0x00,   # LDA #$0000
        0xE2, 0x20, # SEP #$20
        0x22, 0x81, 0x1A, 0xF0, # JSR #$F01A81
        0xC2, 0x30, # REP #$30
        0x2B,   # PLD
        0x7A,   # PLY
        0xFA,   # PLX
        0x68,   # PLA
        0x28,   # PLP
        0xA9, 0x0A, #LDA #$0A       ; C3/1FF4
        0x85, 0x26, #STA $26        ; Next: Skills menu
        0x5C, 0xB2, 0x29, 0xC3, # JMP #$C329B2 (return to skills menu)
        0x64, 0x10, # STZ $10
        0x64, 0x11, # STZ $11
        0xA6, 0x10, # LDX $10
        0xA9, 0x00, # LDA #$00
        0x9D, 0x00, 0x01,   #STA $0100,X
        0x18, # CLC
        0xE8, # INX
        0x86, 0x10, # STX $10
        0xE0, 0x08, 0x00,   # CPX #$0008
        0x90, 0xF0, # BCC
        0x6B,   #RTL
        0x64, 0x27, # STZ $27
        0x64, 0x28, # STZ $28
        0xA0, 0x10, 0x00,   # LDY #$0010
        0x84, 0x29, # STY $29
        0x64, 0x2D, # STZ $29
        0x64, 0x2E, # STZ $2E
        0x64, 0x2B, # STZ $2B
        0x64, 0x2C, # STZ $2C
        0xA6, 0x27, # LDX $27
        0xBF, 0x1B, 0x42, 0x7E, # LDA #$7E421B
        0x85, 0x2F, # STA $2F
        0xA4, 0x29, #LDY $29
        0xA5, 0x2F, #LDA $2F
        0x99, 0x00, 0x01, #STA $0100,Y
        0xA9, 0x00, #$00
        0x9F, 0x1B, 0x42, 0x7E, # STA $7E421B,X
        0x18, # CLC
        0xC8, # INY
        0x84, 0x29, # STY $29
        0x18, # CLC
        0xE8, # INX
        0x86, 0x27, #STX $27
        0x18, # CLC
        0xA4, 0x2B, # LDY $2B
        0xC8, # INY
        0x84, 0x2B, # STY $2B
        0xA6, 0x2B, # LDX $2B
        0xE0, 0x2A, 0x00, # CPX #$002A
        0x90, 0xD6, # BCC
        0x18, #CLC
        0xA5, 0x27, # LDA $27
        0x69, 0x80, # ADC #$80
        0x85, 0x30, # STA $30
        0xA5, 0x28, # LDA $28
        0x69, 0x00, # ADC #$00
        0x85, 0x31, # STA $31
        0x38, # SEC
        0xA5, 0x30, # LDA $30
        0xE9, 0x28, # SBC #$28
        0x85, 0x32, # STA $32
        0xA5, 0x31, # LDA $31
        0xE9, 0x00, # SBC #$00
        0x85, 0x33, # STA $33
        0xA4, 0x32, # LDY $32
        0x84, 0x27, # STY $27
        0x18, #CLC
        0xA4, 0x2D, # LDY $2D
        0xC8, #INY
        0x84, 0x2D, # STY $2D
        0xA6, 0x2D, # LDX $2D
        0xE0, 0x04, 0x00, # CPX #$0004
        0x90, 0xA7, # BCC
        0x6B,   # RTL
        0x64, 0x27, # STZ $27
        0x64, 0x28, # STZ $28
        0xA0, 0x10, 0x00, # LDY #$0010
        0x84, 0x29, # STY $29
        0x64, 0x2D, # STZ $2D
        0x64, 0x2E, # STZ $2E
        0x64, 0x2B, # STZ $2B
        0x64, 0x2C, # STZ $2C
        0xA6, 0x29, # LDX $29
        0xBD, 0x00, 0x01,   # LDA $0100,X
        0x85, 0x2F, # STA $2F
        0xA6, 0x27, # LDX $27
        0xA5, 0x2F, # LDA $2F
        0x9F, 0x1B, 0x42, 0x7E, # STA $7E421B
        0x18, # CLC
        0xA4, 0x29, # LDY $29
        0xC8, # INY
        0x84, 0x29, # STY $29
        0x18, # CLC
        0xE8, # INX
        0x86, 0x27, # STX $27
        0x18, # CLC
        0xA4, 0x2B, # LDY $2B
        0xC8, # INY
        0x84, 0x2B, # STY $2B
        0xA6, 0x2B, # LDX $2B
        0xE0, 0x2A, 0x00, # CPX #$002A
        0x90, 0xDA, # BCC
        0x18, # CLC
        0xA5, 0x27, # LDA $27
        0x69, 0x80, # ADC #$80
        0x85, 0x30, # STA $30
        0xA5, 0x28, # LDA $28
        0x69, 0x00, # ADC #$00
        0x85, 0x31, # STA $31
        0x38, # SEC
        0xA5, 0x30, # LDA $30
        0xE9, 0x28, # SBC #$28
        0x85, 0x32, # STA $32
        0xA5, 0x31, # LDA $31
        0xE9, 0x00, # SBC #$00
        0x85, 0x33, # STA $33
        0xA4, 0x32, # LDY $32
        0x84, 0x27, # STY $27
        0x18, # CLC
        0xA4, 0x2D,
        0xC8, #INY
        0x84, 0x2D,
        0xA6, 0x2D, # LDX $2D
        0xE0, 0x04, 0x00, # CPX #$0004
        0x90, 0xAB, # BCC
        0x6B, # RTL
        0xA9, 0x08, # LDA #$08
        0x8D, 0x13, 0x00,   # STA $0013
        0x6B, #RTL
        #$F01A87:
        0xAD, 0x4B, 0x00, # LDA $004B   ; get dance index
        0x0A, # ASL ; multiply dance index by 2
        0xAA, #TAX
        0xAD, 0x4C, 0x1D, # ADC $1D4C   ; get known dances
        0x3F, 0x67, 0x9C, 0xC3, # AND $C39C67,X ; A &= 2^X
        0xF0, 0x05, # BEQ unknown_dance
        0x8A, # TXA
        0x0A, # ASL
        0xAA, # TAX     ; X = dance index * 4
        0x80, 0x03, # BRA get_dance_moves
        #unknown_dance:
        0xA2, 0xD0, 0xD0, # LDX #$D0D0		; points to $CFFFBE
        0xBF, 0x80, 0xFE, 0xCF, # LDA $CFFE80,X    ; get id of dance move
        0x85, 0x35, # STA $35
        0xA0, 0x9B, 0x42, # LDY #$429B
        0x84, 0x36, # STY $36
        0xDA, # PHX
        0x22, 0x71, 0x18, 0xF0, # JSL $F01871   ; draw move name
        0xFA, # PLX
        0xE8, # INX
        0xBF, 0x80, 0xFE, 0xCF, # LDA $CFFE80,X    ; get id of dance move
        0x85, 0x35, # STA $35
        0xA0, 0xB1, 0x42, # LDY #$42B1
        0x84, 0x36, # STY $36
        0xDA, # PHX
        0x22, 0x71, 0x18, 0xF0,  # JSL $F01871   ; draw move name
        0xFA, # PLX
        0xE8, # INX
        0xBF, 0x80, 0xFE, 0xCF, # LDA $CFFE80,X    ; get id of dance move
        0x85, 0x35, # STA $35
        0xA0, 0x1B, 0x43, # LDY #$431B
        0x84, 0x36, # STY $36
        0xDA, # PHX
        0x22, 0x71, 0x18, 0xF0,  # JSL $F01871   ; draw move name
        0xFA, # PLX
        0xE8, # INX
        0xBF, 0x80, 0xFE, 0xCF, # LDA $CFFE80,X    ; get id of dance move
        0x85, 0x35, # STA $35
        0xA0, 0x31, 0x43, # LDY #$4331
        0x84, 0x36, # STY $36
        0xDA, # PHX
        0x22, 0x71, 0x18, 0xF0,  # JSL $F01871   ; draw move name
        0xFA, # PLX
        0x6B # RTL
    ])
    rage_dance_sub.write(fout)

    rage_dance_sub.set_location(0x301B2B)
    rage_dance_sub.bytestring = bytes([
        0xAD, 0x00, 0x01, # LDA $0100
        0x85, 0x12, # STA $12
        0xA5, 0x12, # LDA $12
        0xC9, 0x04, # CMP $04
        0xD0, 0x05, # BNE
        0xA9, 0x80, # LDA #$80
        0x8D, 0x09, 0x00, # STA $0009
        0xAD, 0x00, 0x01, # LDA $0100
        0x85, 0x13, # STA $13
        0xA5, 0x13, # LDA $13
        0xC9, 0x03, # CMP #$03
        0xD0, 0x1B, # BNE
        0xA9, 0x00, # LDA $00
        0x8D, 0x15, 0x00, # STA $0015
        0xA9, 0x38, # LDA #$38
        0x8D, 0x17, 0x00, # STA $0017
        0xAD, 0x00, 0x01, # LDA $0001
        0x85, 0x14, # STA $14
        0x18, # CLC
        0xA5, 0x14, # LDA $14
        0x69, 0x01, # ADC #$01
        0x85, 0x15, # STA $15
        0xA5, 0x15, # LDA $15
        0x8D, 0x00, 0x01, # STA $0100
        0xAD, 0x00, 0x01, # LDA $0100
        0x85, 0x16, # LDA $16
        0xA5, 0x16, # STA $16
        0xC9, 0x02, # CMP #$02
        0xD0, 0x2F, # BNE
        0xAD, 0x09, 0x00, # LDA
        0x85, 0x17, # STA
        0xA5, 0x17, # LDA
        0xC9, 0x80, # CMP
        0x90, 0x1A, # BCC
        0xAD, 0x00, 0x01, # LDA
        0x85, 0x18, # STA
        0x18, # CLC
        0xA5, 0x18, # LDA $18
        0x69, 0x01,
        0x85, 0x19,
        0xA5, 0x19,
        0x8D, 0x00, 0x01,
        0xA9, 0x00,
        0x8D, 0x09, 0x00,
        0x22, 0x1E, 0x1A, 0xF0, # JSL
        0xA9, 0x04,
        0x8D, 0x15, 0x00,
        0xA9, 0x40,
        0x8D, 0x17, 0x00, # STA $0017
        0xAD, 0x00, 0x01,
        0x85, 0x1A,
        0xA5, 0x1A,
        0xC9, 0x01,
        0xD0, 0x15,
        0x22, 0xB7, 0x19, 0xF0,
        0xAD, 0x00, 0x01,
        0x85, 0x1B,
        0x18, # CLC
        0xA5, 0x1B,
        0x69, 0x01,
        0x85, 0x1C,
        0xA5, 0x1C,
        0x8D, 0x00, 0x01,
        0xAD, 0x00, 0x01,
        0x85, 0x1D,
        0xA9, 0x00,
        0xC5, 0x1D, # CMP $1D
        0xB0, 0x0F, # BCS
        0xAD, 0x00, 0x01,
        0x85, 0x1E,
        0xA5, 0x1E,
        0xC9, 0x03, # CMP #$03
        0xB0, 0x04, # BCS
        0x22, 0x87, 0x1A, 0xF0,
        0xAD, 0x00, 0x01,
        0x85, 0x1F,
        0xA5, 0x1F,
        0xC9, 0x00, # CMP #$09
        0xD0, 0x11, # BNE
        0xAD, 0x00, 0x01,
        0x85, 0x20,
        0x18, # CLC
        0xA5, 0x20,
        0x69, 0x01, # ADC #$01
        0x85, 0x21,
        0xA5, 0x21,
        0x8D, 0x00, 0x01,
        0x6B # RTL
    ])
    rage_dance_sub.write(fout)

    rage_dance_sub.set_location(0x10CF50)
    rage_dance_sub.bytestring = bytes([0xFF] * 4)
    rage_dance_sub.write(fout)

def show_original_names(fout):
    add_common_menu_stuff(fout)

    names_sub = Substitution()
    names_sub.set_location(0x33311)
    names_sub.bytestring = bytes([0x22, 0x35, 0x07, 0xF0, 0xEA])
    names_sub.write(fout)

    names_sub.set_location(0x3335D)
    names_sub.bytestring = bytes([0x22, 0x43, 0x07, 0xF0, 0xEA])
    names_sub.write(fout)

    names_sub.set_location(0x333A9)
    names_sub.bytestring = bytes([0x22, 0x51, 0x07, 0xF0, 0xEA])
    names_sub.write(fout)

    names_sub.set_location(0x333F5)
    names_sub.bytestring = bytes([0x22, 0x5F, 0x07, 0xF0, 0xEA])
    names_sub.write(fout)

    names_sub.set_location(0x37973)
    names_sub.bytestring = bytes([0x22, 0x6D, 0x07, 0xF0])
    names_sub.write(fout)

    names_sub.set_location(0x300735)
    names_sub.bytestring = bytes([
        0xA2, 0x31, 0x37, 0x86, 0xF1, 0xDA, 0x5A, 0xA6,
        0x6D, 0xA0, 0x59, 0x39, 0x80, 0x40, 0xA2, 0x35, 0x37, 0x86, 0xF1, 0xDA,
        0x5A, 0xA6, 0x6F, 0xA0, 0xD9, 0x3A, 0x80, 0x32, 0xA2, 0x39, 0x37, 0x86,
        0xF1, 0xDA, 0x5A, 0xA6, 0x71, 0xA0, 0x59, 0x3C, 0x80, 0x24, 0xA2, 0x3D,
        0x37, 0x86, 0xF1, 0xDA, 0x5A, 0xA6, 0x73, 0xA0, 0xD9, 0x3D, 0x80, 0x16,
        0xA9, 0x20, 0x85, 0x29, 0x22, 0x7A, 0x07, 0xF0, 0xA9, 0x24, 0x85, 0x29,
        0x6B, 0xDA, 0x5A, 0xA6, 0x67, 0xA0, 0x5F, 0x3A, 0x80, 0x00, 0x7B, 0x0B,
        0xF4, 0x00, 0x15, 0x2B, 0x86, 0x08, 0x84, 0x0A, 0x22, 0x95, 0x07, 0xF0,
        0x2B, 0x7A, 0xFA, 0x6B, 0xA5, 0x09, 0x38, 0xE9, 0x16, 0x85, 0x09, 0xA6,
        0x08, 0x8E, 0x04, 0x42, 0xA9, 0x25, 0x8D, 0x06, 0x42, 0xEA, 0xEA, 0xEA,
        0xEA, 0xEA, 0xEA, 0xEA, 0xAE, 0x14, 0x42, 0xE0, 0x0E, 0x00, 0xB0, 0x25,
        0xC2, 0x20, 0x8A, 0x0A, 0x0A, 0x0A, 0x69, 0xDB, 0x07, 0x85, 0x12, 0xA5,
        0x0A, 0x85, 0x15, 0xA9, 0x00, 0x00, 0xE2, 0x20, 0xA9, 0xF0, 0x85, 0x14,
        0xA9, 0x06, 0x85, 0x17, 0xAD, 0x29, 0x00, 0x85, 0x18, 0x22, 0xEE, 0x18,
        0xF0, 0x6B, 0x93, 0x84, 0x91, 0x91, 0x80, 0xFF, 0xFF, 0xFF, 0x8B, 0x8E,
        0x82, 0x8A, 0x84, 0xFF, 0xFF, 0xFF, 0x82, 0x98, 0x80, 0x8D, 0xFF, 0xFF,
        0xFF, 0xFF, 0x92, 0x87, 0x80, 0x83, 0x8E, 0x96, 0xFF, 0xFF, 0x84, 0x83,
        0x86, 0x80, 0x91, 0xFF, 0xFF, 0xFF, 0x92, 0x80, 0x81, 0x88, 0x8D, 0xFF,
        0xFF, 0xFF, 0x82, 0x84, 0x8B, 0x84, 0x92, 0xFF, 0xFF, 0xFF, 0x92, 0x93,
        0x91, 0x80, 0x86, 0x8E, 0xFF, 0xFF, 0x91, 0x84, 0x8B, 0x8C, 0xFF, 0xFF,
        0xFF, 0xFF, 0x92, 0x84, 0x93, 0x99, 0x84, 0x91, 0xFF, 0xFF, 0x8C, 0x8E,
        0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x86, 0x80, 0x94, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0x86, 0x8E, 0x86, 0x8E, 0xFF, 0xFF, 0xFF, 0xFF, 0x94, 0x8C,
        0x80, 0x91, 0x8E, 0xFF, 0xFF, 0xFF])
    names_sub.write(fout)

def improve_dance_menu(fout):
    add_common_menu_stuff(fout)

    dance_menu_sub = Substitution()
    dance_menu_sub.set_location(0x321F0)
    dance_menu_sub.bytestring = bytes([0x5C, 0x5C, 0x19, 0xF0])
    dance_menu_sub.write(fout)

    dance_menu_sub.set_location(0x328B0)
    dance_menu_sub.bytestring = bytes([0x5C, 0x39, 0x19, 0xF0])
    dance_menu_sub.write(fout)

    dance_menu_sub.set_location(0x329AE)
    dance_menu_sub.bytestring = bytes([0x5C, 0x7F, 0x19, 0xF0])
    dance_menu_sub.write(fout)

    _rage_dance_common(fout)


def y_equip_relics(fout):
    y_equip_relics_sub = Substitution()
    y_equip_relics_sub.set_location(0x30247)
    y_equip_relics_sub.bytestring = bytes([0x1e, 0x96])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x30287)
    y_equip_relics_sub.bytestring = bytes([0xcd, 0x98])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x31be9)
    y_equip_relics_sub.bytestring = bytes([0x5b, 0x96])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x31bf7)
    y_equip_relics_sub.bytestring = bytes([0x60, 0x96])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x3960d)
    y_equip_relics_sub.bytestring = bytes([0x65, 0x96])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39615)
    y_equip_relics_sub.bytestring = bytes([0x0c, 0x96, 0xe6, 0x3a, 0xa9, 0x2c, 0x85, 0x29, 0x60, 0x20, 0x0c, 0x96, 0x20, 0x4e, 0x90, 0x20, 0x56, 0x8e, 0xa5, 0x08, 0x10, 0x0b, 0x20, 0xb2, 0x0e, 0x7b, 0xa5, 0x4b, 0x0a, 0xaa, 0x7c, 0x6c, 0x96, 0xa5, 0x09, 0x10, 0x0d, 0x20, 0xa9, 0x0e, 0x20, 0x10, 0x91, 0xa9, 0x04, 0x85, 0x27, 0x64, 0x26, 0x60, 0x0a, 0x10, 0x0a, 0x20, 0xb2, 0x0e, 0xa9, 0x58, 0x85, 0x26, 0xe6, 0x25, 0x60, 0xa9, 0x35, 0x85, 0xe0, 0x4c, 0x22, 0x20, 0xa0, 0x09, 0xa3, 0x80, 0x08, 0xa0, 0x11, 0xa3, 0x80, 0x03, 0xa0, 0xea, 0xa2, 0x4c, 0xf9, 0x02, 0x60])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39672)
    y_equip_relics_sub.bytestring = bytes([0x9a])
    y_equip_relics_sub.write(fout)
    y_equip_relics_sub.set_location(0x39678)
    y_equip_relics_sub.bytestring = bytes([0x5b])
    y_equip_relics_sub.write(fout)
    y_equip_relics_sub.set_location(0x39692)
    y_equip_relics_sub.bytestring = bytes([0x60, 0x96, 0x20, 0x7a, 0x96, 0xe6, 0x26, 0x60, 0x20, 0xa8, 0x96, 0x80, 0xe9, 0xa9, 0x35, 0x85, 0x26, 0x64, 0x27, 0xc6, 0x25])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x3988c)
    y_equip_relics_sub.bytestring = bytes([0x10, 0x21, 0x20, 0xb2, 0x0e, 0xa5, 0x4e, 0x85, 0x5f, 0xa2, 0x57, 0x55, 0x86, 0x26, 0x20, 0x59, 0x9b, 0x20, 0x50, 0xa1, 0x20, 0xeb, 0x9a, 0x20, 0x33, 0x92, 0x20, 0x15, 0x6a, 0x20, 0x68, 0x13, 0x4c, 0xac, 0x9c, 0xa5, 0x09, 0x10, 0x0d, 0x20, 0xa9, 0x0e, 0xa9, 0x36, 0x85, 0x26, 0x20, 0x50, 0x8e, 0x4c, 0x59, 0x8e, 0x0a, 0x10, 0x03, 0x4C, 0x4A, 0x96, 0xA5, 0x26, 0x69, 0x29, 0x4C, 0x56, 0x96, 0x20, 0x72, 0x8E, 0xA5, 0x08, 0x10, 0xDB, 0x20, 0xB2, 0x0E, 0x20, 0xF2, 0x93, 0xC2, 0x21, 0x98, 0xE2, 0x20, 0x65, 0x4B, 0xA8, 0xB9, 0x1F, 0x00, 0x20, 0x5E, 0x9D, 0xA9, 0xFF, 0x99, 0x1F, 0x00, 0x20, 0x1B, 0x91, 0x80, 0xBD, 0xA5, 0x09, 0x0A, 0x10, 0x14, 0x20, 0xB2, 0x0E, 0x20, 0x5F, 0x1E, 0xB0, 0x0A, 0x20, 0xEB, 0x9E, 0xA5, 0x99, 0xD0, 0x03, 0x20, 0x9F, 0x96, 0x64, 0x08, 0x4C, 0xE6, 0x9E, 0xEA])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39e81)
    y_equip_relics_sub.bytestring = bytes([0x5b])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39e8f)
    y_equip_relics_sub.bytestring = bytes([0x60])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39edd)
    y_equip_relics_sub.bytestring = bytes([0xf2, 0x98])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39f1d)
    y_equip_relics_sub.bytestring = bytes([0x65])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39fdf)
    y_equip_relics_sub.bytestring = bytes([0x5b])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x39ff0)
    y_equip_relics_sub.bytestring = bytes([0x60])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x3a048)
    y_equip_relics_sub.bytestring = bytes([0xf2, 0x98])
    y_equip_relics_sub.write(fout)

    y_equip_relics_sub.set_location(0x3a147)
    y_equip_relics_sub.bytestring = bytes([0xf2, 0x98])
    y_equip_relics_sub.write(fout)


def fix_gogo_portrait(fout):
    """Hides the portion of Gogo's portrait that shows incorrectly on his status menu."""
    fout.seek(0x35f51)
    fout.write(bytes([0x0a, 0x62]))


def add_music_disable_option(fout):
    """Adds a Music option to the Config screen to let you turn off the music."""
    apply_asm_patch(fout, "music_disable_option")


def improved_party_gear_screen(fout):
    """Improves the party equip screen by adding character slot names and espers."""
    apply_asm_patch(fout, "improved_party_gear_screen")
